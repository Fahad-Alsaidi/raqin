// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBookAuthors(t *testing.T) {
	t.Parallel()

	query := BookAuthors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBookAuthorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookAuthors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookAuthorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BookAuthors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookAuthors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookAuthorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookAuthorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookAuthors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookAuthorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookAuthorExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BookAuthor exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookAuthorExists to return true, but got false.")
	}
}

func testBookAuthorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookAuthorFound, err := FindBookAuthor(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if bookAuthorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBookAuthorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BookAuthors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBookAuthorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BookAuthors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBookAuthorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bookAuthorOne := &BookAuthor{}
	bookAuthorTwo := &BookAuthor{}
	if err = randomize.Struct(seed, bookAuthorOne, bookAuthorDBTypes, false, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}
	if err = randomize.Struct(seed, bookAuthorTwo, bookAuthorDBTypes, false, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookAuthorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookAuthorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookAuthors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBookAuthorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bookAuthorOne := &BookAuthor{}
	bookAuthorTwo := &BookAuthor{}
	if err = randomize.Struct(seed, bookAuthorOne, bookAuthorDBTypes, false, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}
	if err = randomize.Struct(seed, bookAuthorTwo, bookAuthorDBTypes, false, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookAuthorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookAuthorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookAuthors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookAuthorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookAuthor) error {
	*o = BookAuthor{}
	return nil
}

func bookAuthorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookAuthor) error {
	*o = BookAuthor{}
	return nil
}

func bookAuthorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BookAuthor) error {
	*o = BookAuthor{}
	return nil
}

func bookAuthorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookAuthor) error {
	*o = BookAuthor{}
	return nil
}

func bookAuthorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookAuthor) error {
	*o = BookAuthor{}
	return nil
}

func bookAuthorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookAuthor) error {
	*o = BookAuthor{}
	return nil
}

func bookAuthorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookAuthor) error {
	*o = BookAuthor{}
	return nil
}

func bookAuthorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookAuthor) error {
	*o = BookAuthor{}
	return nil
}

func bookAuthorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookAuthor) error {
	*o = BookAuthor{}
	return nil
}

func testBookAuthorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BookAuthor{}
	o := &BookAuthor{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookAuthor object: %s", err)
	}

	AddBookAuthorHook(boil.BeforeInsertHook, bookAuthorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookAuthorBeforeInsertHooks = []BookAuthorHook{}

	AddBookAuthorHook(boil.AfterInsertHook, bookAuthorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookAuthorAfterInsertHooks = []BookAuthorHook{}

	AddBookAuthorHook(boil.AfterSelectHook, bookAuthorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookAuthorAfterSelectHooks = []BookAuthorHook{}

	AddBookAuthorHook(boil.BeforeUpdateHook, bookAuthorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookAuthorBeforeUpdateHooks = []BookAuthorHook{}

	AddBookAuthorHook(boil.AfterUpdateHook, bookAuthorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookAuthorAfterUpdateHooks = []BookAuthorHook{}

	AddBookAuthorHook(boil.BeforeDeleteHook, bookAuthorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookAuthorBeforeDeleteHooks = []BookAuthorHook{}

	AddBookAuthorHook(boil.AfterDeleteHook, bookAuthorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookAuthorAfterDeleteHooks = []BookAuthorHook{}

	AddBookAuthorHook(boil.BeforeUpsertHook, bookAuthorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookAuthorBeforeUpsertHooks = []BookAuthorHook{}

	AddBookAuthorHook(boil.AfterUpsertHook, bookAuthorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookAuthorAfterUpsertHooks = []BookAuthorHook{}
}

func testBookAuthorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookAuthors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookAuthorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bookAuthorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BookAuthors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookAuthorToOneBookUsingBook(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BookAuthor
	var foreign Book

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookAuthorDBTypes, false, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BookID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Book().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BookAuthorSlice{&local}
	if err = local.L.LoadBook(ctx, tx, false, (*[]*BookAuthor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Book = nil
	if err = local.L.LoadBook(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookAuthorToOneAuthorUsingAuthor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BookAuthor
	var foreign Author

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookAuthorDBTypes, false, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Author struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AuthorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BookAuthorSlice{&local}
	if err = local.L.LoadAuthor(ctx, tx, false, (*[]*BookAuthor)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author = nil
	if err = local.L.LoadAuthor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBookAuthorToOneSetOpBookUsingBook(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookAuthor
	var b, c Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookAuthorDBTypes, false, strmangle.SetComplement(bookAuthorPrimaryKeyColumns, bookAuthorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Book{&b, &c} {
		err = a.SetBook(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Book != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BookAuthors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BookID != x.ID {
			t.Error("foreign key was wrong value", a.BookID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BookID))
		reflect.Indirect(reflect.ValueOf(&a.BookID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BookID != x.ID {
			t.Error("foreign key was wrong value", a.BookID, x.ID)
		}
	}
}
func testBookAuthorToOneSetOpAuthorUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookAuthor
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookAuthorDBTypes, false, strmangle.SetComplement(bookAuthorPrimaryKeyColumns, bookAuthorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Author{&b, &c} {
		err = a.SetAuthor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BookAuthors[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AuthorID != x.ID {
			t.Error("foreign key was wrong value", a.AuthorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorID))
		reflect.Indirect(reflect.ValueOf(&a.AuthorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AuthorID != x.ID {
			t.Error("foreign key was wrong value", a.AuthorID, x.ID)
		}
	}
}

func testBookAuthorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookAuthorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookAuthorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookAuthorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookAuthors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookAuthorDBTypes = map[string]string{`ID`: `int`, `BookID`: `int`, `AuthorID`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                 = bytes.MinRead
)

func testBookAuthorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bookAuthorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookAuthorAllColumns) == len(bookAuthorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookAuthors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBookAuthorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bookAuthorAllColumns) == len(bookAuthorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookAuthor{}
	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookAuthors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookAuthorDBTypes, true, bookAuthorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookAuthorAllColumns, bookAuthorPrimaryKeyColumns) {
		fields = bookAuthorAllColumns
	} else {
		fields = strmangle.SetComplement(
			bookAuthorAllColumns,
			bookAuthorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookAuthorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBookAuthorsUpsert(t *testing.T) {
	t.Parallel()

	if len(bookAuthorAllColumns) == len(bookAuthorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBookAuthorUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BookAuthor{}
	if err = randomize.Struct(seed, &o, bookAuthorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookAuthor: %s", err)
	}

	count, err := BookAuthors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookAuthorDBTypes, false, bookAuthorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookAuthor struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookAuthor: %s", err)
	}

	count, err = BookAuthors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
