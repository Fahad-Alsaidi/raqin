// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLineRevisionComments(t *testing.T) {
	t.Parallel()

	query := LineRevisionComments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLineRevisionCommentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LineRevisionComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLineRevisionCommentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LineRevisionComments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LineRevisionComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLineRevisionCommentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LineRevisionCommentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LineRevisionComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLineRevisionCommentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LineRevisionCommentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LineRevisionComment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LineRevisionCommentExists to return true, but got false.")
	}
}

func testLineRevisionCommentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	lineRevisionCommentFound, err := FindLineRevisionComment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if lineRevisionCommentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLineRevisionCommentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LineRevisionComments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLineRevisionCommentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LineRevisionComments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLineRevisionCommentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	lineRevisionCommentOne := &LineRevisionComment{}
	lineRevisionCommentTwo := &LineRevisionComment{}
	if err = randomize.Struct(seed, lineRevisionCommentOne, lineRevisionCommentDBTypes, false, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}
	if err = randomize.Struct(seed, lineRevisionCommentTwo, lineRevisionCommentDBTypes, false, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lineRevisionCommentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lineRevisionCommentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LineRevisionComments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLineRevisionCommentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	lineRevisionCommentOne := &LineRevisionComment{}
	lineRevisionCommentTwo := &LineRevisionComment{}
	if err = randomize.Struct(seed, lineRevisionCommentOne, lineRevisionCommentDBTypes, false, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}
	if err = randomize.Struct(seed, lineRevisionCommentTwo, lineRevisionCommentDBTypes, false, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lineRevisionCommentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lineRevisionCommentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LineRevisionComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func lineRevisionCommentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionComment) error {
	*o = LineRevisionComment{}
	return nil
}

func lineRevisionCommentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionComment) error {
	*o = LineRevisionComment{}
	return nil
}

func lineRevisionCommentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionComment) error {
	*o = LineRevisionComment{}
	return nil
}

func lineRevisionCommentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionComment) error {
	*o = LineRevisionComment{}
	return nil
}

func lineRevisionCommentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionComment) error {
	*o = LineRevisionComment{}
	return nil
}

func lineRevisionCommentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionComment) error {
	*o = LineRevisionComment{}
	return nil
}

func lineRevisionCommentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionComment) error {
	*o = LineRevisionComment{}
	return nil
}

func lineRevisionCommentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionComment) error {
	*o = LineRevisionComment{}
	return nil
}

func lineRevisionCommentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionComment) error {
	*o = LineRevisionComment{}
	return nil
}

func testLineRevisionCommentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &LineRevisionComment{}
	o := &LineRevisionComment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment object: %s", err)
	}

	AddLineRevisionCommentHook(boil.BeforeInsertHook, lineRevisionCommentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	lineRevisionCommentBeforeInsertHooks = []LineRevisionCommentHook{}

	AddLineRevisionCommentHook(boil.AfterInsertHook, lineRevisionCommentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	lineRevisionCommentAfterInsertHooks = []LineRevisionCommentHook{}

	AddLineRevisionCommentHook(boil.AfterSelectHook, lineRevisionCommentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	lineRevisionCommentAfterSelectHooks = []LineRevisionCommentHook{}

	AddLineRevisionCommentHook(boil.BeforeUpdateHook, lineRevisionCommentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	lineRevisionCommentBeforeUpdateHooks = []LineRevisionCommentHook{}

	AddLineRevisionCommentHook(boil.AfterUpdateHook, lineRevisionCommentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	lineRevisionCommentAfterUpdateHooks = []LineRevisionCommentHook{}

	AddLineRevisionCommentHook(boil.BeforeDeleteHook, lineRevisionCommentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	lineRevisionCommentBeforeDeleteHooks = []LineRevisionCommentHook{}

	AddLineRevisionCommentHook(boil.AfterDeleteHook, lineRevisionCommentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	lineRevisionCommentAfterDeleteHooks = []LineRevisionCommentHook{}

	AddLineRevisionCommentHook(boil.BeforeUpsertHook, lineRevisionCommentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	lineRevisionCommentBeforeUpsertHooks = []LineRevisionCommentHook{}

	AddLineRevisionCommentHook(boil.AfterUpsertHook, lineRevisionCommentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	lineRevisionCommentAfterUpsertHooks = []LineRevisionCommentHook{}
}

func testLineRevisionCommentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LineRevisionComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLineRevisionCommentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(lineRevisionCommentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LineRevisionComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLineRevisionCommentToOneLineRevisionUsingLineRevision(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LineRevisionComment
	var foreign LineRevision

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lineRevisionCommentDBTypes, false, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, lineRevisionDBTypes, false, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LineRevisionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LineRevision().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LineRevisionCommentSlice{&local}
	if err = local.L.LoadLineRevision(ctx, tx, false, (*[]*LineRevisionComment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LineRevision == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LineRevision = nil
	if err = local.L.LoadLineRevision(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LineRevision == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLineRevisionCommentToOneUserUsingCommenter(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LineRevisionComment
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lineRevisionCommentDBTypes, false, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CommenterID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Commenter().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LineRevisionCommentSlice{&local}
	if err = local.L.LoadCommenter(ctx, tx, false, (*[]*LineRevisionComment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Commenter == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Commenter = nil
	if err = local.L.LoadCommenter(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Commenter == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLineRevisionCommentToOneSetOpLineRevisionUsingLineRevision(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevisionComment
	var b, c LineRevision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionCommentDBTypes, false, strmangle.SetComplement(lineRevisionCommentPrimaryKeyColumns, lineRevisionCommentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, lineRevisionDBTypes, false, strmangle.SetComplement(lineRevisionPrimaryKeyColumns, lineRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lineRevisionDBTypes, false, strmangle.SetComplement(lineRevisionPrimaryKeyColumns, lineRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*LineRevision{&b, &c} {
		err = a.SetLineRevision(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LineRevision != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LineRevisionComments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LineRevisionID != x.ID {
			t.Error("foreign key was wrong value", a.LineRevisionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LineRevisionID))
		reflect.Indirect(reflect.ValueOf(&a.LineRevisionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LineRevisionID != x.ID {
			t.Error("foreign key was wrong value", a.LineRevisionID, x.ID)
		}
	}
}
func testLineRevisionCommentToOneSetOpUserUsingCommenter(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevisionComment
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionCommentDBTypes, false, strmangle.SetComplement(lineRevisionCommentPrimaryKeyColumns, lineRevisionCommentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetCommenter(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Commenter != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CommenterLineRevisionComments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CommenterID != x.ID {
			t.Error("foreign key was wrong value", a.CommenterID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CommenterID))
		reflect.Indirect(reflect.ValueOf(&a.CommenterID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CommenterID != x.ID {
			t.Error("foreign key was wrong value", a.CommenterID, x.ID)
		}
	}
}

func testLineRevisionCommentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLineRevisionCommentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LineRevisionCommentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLineRevisionCommentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LineRevisionComments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	lineRevisionCommentDBTypes = map[string]string{`ID`: `int`, `LineRevisionID`: `int`, `CommenterID`: `int`, `Comment`: `text`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                          = bytes.MinRead
)

func testLineRevisionCommentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(lineRevisionCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(lineRevisionCommentAllColumns) == len(lineRevisionCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LineRevisionComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLineRevisionCommentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(lineRevisionCommentAllColumns) == len(lineRevisionCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionComment{}
	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LineRevisionComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lineRevisionCommentDBTypes, true, lineRevisionCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(lineRevisionCommentAllColumns, lineRevisionCommentPrimaryKeyColumns) {
		fields = lineRevisionCommentAllColumns
	} else {
		fields = strmangle.SetComplement(
			lineRevisionCommentAllColumns,
			lineRevisionCommentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LineRevisionCommentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLineRevisionCommentsUpsert(t *testing.T) {
	t.Parallel()

	if len(lineRevisionCommentAllColumns) == len(lineRevisionCommentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLLineRevisionCommentUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LineRevisionComment{}
	if err = randomize.Struct(seed, &o, lineRevisionCommentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LineRevisionComment: %s", err)
	}

	count, err := LineRevisionComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, lineRevisionCommentDBTypes, false, lineRevisionCommentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LineRevisionComment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LineRevisionComment: %s", err)
	}

	count, err = LineRevisionComments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
