// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Line is an object representing the database table.
type Line struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	PageID    int         `boil:"page_id" json:"page_id" toml:"page_id" yaml:"page_id"`
	Path      string      `boil:"path" json:"path" toml:"path" yaml:"path"`
	Number    int         `boil:"number" json:"number" toml:"number" yaml:"number"`
	Stage     string      `boil:"stage" json:"stage" toml:"stage" yaml:"stage"`
	LineText  null.String `boil:"line_text" json:"line_text,omitempty" toml:"line_text" yaml:"line_text,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *lineR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lineL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LineColumns = struct {
	ID        string
	PageID    string
	Path      string
	Number    string
	Stage     string
	LineText  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	PageID:    "page_id",
	Path:      "path",
	Number:    "number",
	Stage:     "stage",
	LineText:  "line_text",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// Generated where

var LineWhere = struct {
	ID        whereHelperint
	PageID    whereHelperint
	Path      whereHelperstring
	Number    whereHelperint
	Stage     whereHelperstring
	LineText  whereHelpernull_String
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"line\".\"id\""},
	PageID:    whereHelperint{field: "\"line\".\"page_id\""},
	Path:      whereHelperstring{field: "\"line\".\"path\""},
	Number:    whereHelperint{field: "\"line\".\"number\""},
	Stage:     whereHelperstring{field: "\"line\".\"stage\""},
	LineText:  whereHelpernull_String{field: "\"line\".\"line_text\""},
	CreatedAt: whereHelpertime_Time{field: "\"line\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"line\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"line\".\"deleted_at\""},
}

// LineRels is where relationship names are stored.
var LineRels = struct {
	Page          string
	LineRevisions string
}{
	Page:          "Page",
	LineRevisions: "LineRevisions",
}

// lineR is where relationships are stored.
type lineR struct {
	Page          *Page             `boil:"Page" json:"Page" toml:"Page" yaml:"Page"`
	LineRevisions LineRevisionSlice `boil:"LineRevisions" json:"LineRevisions" toml:"LineRevisions" yaml:"LineRevisions"`
}

// NewStruct creates a new relationship struct
func (*lineR) NewStruct() *lineR {
	return &lineR{}
}

// lineL is where Load methods for each relationship are stored.
type lineL struct{}

var (
	lineAllColumns            = []string{"id", "page_id", "path", "number", "stage", "line_text", "created_at", "updated_at", "deleted_at"}
	lineColumnsWithoutDefault = []string{"page_id", "path", "number", "stage", "line_text", "deleted_at"}
	lineColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	linePrimaryKeyColumns     = []string{"id"}
)

type (
	// LineSlice is an alias for a slice of pointers to Line.
	// This should generally be used opposed to []Line.
	LineSlice []*Line
	// LineHook is the signature for custom Line hook methods
	LineHook func(context.Context, boil.ContextExecutor, *Line) error

	lineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lineType                 = reflect.TypeOf(&Line{})
	lineMapping              = queries.MakeStructMapping(lineType)
	linePrimaryKeyMapping, _ = queries.BindMapping(lineType, lineMapping, linePrimaryKeyColumns)
	lineInsertCacheMut       sync.RWMutex
	lineInsertCache          = make(map[string]insertCache)
	lineUpdateCacheMut       sync.RWMutex
	lineUpdateCache          = make(map[string]updateCache)
	lineUpsertCacheMut       sync.RWMutex
	lineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lineBeforeInsertHooks []LineHook
var lineBeforeUpdateHooks []LineHook
var lineBeforeDeleteHooks []LineHook
var lineBeforeUpsertHooks []LineHook

var lineAfterInsertHooks []LineHook
var lineAfterSelectHooks []LineHook
var lineAfterUpdateHooks []LineHook
var lineAfterDeleteHooks []LineHook
var lineAfterUpsertHooks []LineHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Line) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Line) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Line) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Line) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Line) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Line) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Line) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Line) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Line) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLineHook registers your hook function for all future operations.
func AddLineHook(hookPoint boil.HookPoint, lineHook LineHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		lineBeforeInsertHooks = append(lineBeforeInsertHooks, lineHook)
	case boil.BeforeUpdateHook:
		lineBeforeUpdateHooks = append(lineBeforeUpdateHooks, lineHook)
	case boil.BeforeDeleteHook:
		lineBeforeDeleteHooks = append(lineBeforeDeleteHooks, lineHook)
	case boil.BeforeUpsertHook:
		lineBeforeUpsertHooks = append(lineBeforeUpsertHooks, lineHook)
	case boil.AfterInsertHook:
		lineAfterInsertHooks = append(lineAfterInsertHooks, lineHook)
	case boil.AfterSelectHook:
		lineAfterSelectHooks = append(lineAfterSelectHooks, lineHook)
	case boil.AfterUpdateHook:
		lineAfterUpdateHooks = append(lineAfterUpdateHooks, lineHook)
	case boil.AfterDeleteHook:
		lineAfterDeleteHooks = append(lineAfterDeleteHooks, lineHook)
	case boil.AfterUpsertHook:
		lineAfterUpsertHooks = append(lineAfterUpsertHooks, lineHook)
	}
}

// One returns a single line record from the query.
func (q lineQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Line, error) {
	o := &Line{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repo: failed to execute a one query for line")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Line records from the query.
func (q lineQuery) All(ctx context.Context, exec boil.ContextExecutor) (LineSlice, error) {
	var o []*Line

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repo: failed to assign all query results to Line slice")
	}

	if len(lineAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Line records in the query.
func (q lineQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to count line rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lineQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repo: failed to check if line exists")
	}

	return count > 0, nil
}

// Page pointed to by the foreign key.
func (o *Line) Page(mods ...qm.QueryMod) pageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PageID),
	}

	queryMods = append(queryMods, mods...)

	query := Pages(queryMods...)
	queries.SetFrom(query.Query, "\"page\"")

	return query
}

// LineRevisions retrieves all the line_revision's LineRevisions with an executor.
func (o *Line) LineRevisions(mods ...qm.QueryMod) lineRevisionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"line_revision\".\"line_id\"=?", o.ID),
	)

	query := LineRevisions(queryMods...)
	queries.SetFrom(query.Query, "\"line_revision\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"line_revision\".*"})
	}

	return query
}

// LoadPage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (lineL) LoadPage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLine interface{}, mods queries.Applicator) error {
	var slice []*Line
	var object *Line

	if singular {
		object = maybeLine.(*Line)
	} else {
		slice = *maybeLine.(*[]*Line)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lineR{}
		}
		args = append(args, object.PageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lineR{}
			}

			for _, a := range args {
				if a == obj.PageID {
					continue Outer
				}
			}

			args = append(args, obj.PageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`page`),
		qm.WhereIn(`page.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Page")
	}

	var resultSlice []*Page
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Page")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for page")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for page")
	}

	if len(lineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Page = foreign
		if foreign.R == nil {
			foreign.R = &pageR{}
		}
		foreign.R.Lines = append(foreign.R.Lines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PageID == foreign.ID {
				local.R.Page = foreign
				if foreign.R == nil {
					foreign.R = &pageR{}
				}
				foreign.R.Lines = append(foreign.R.Lines, local)
				break
			}
		}
	}

	return nil
}

// LoadLineRevisions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (lineL) LoadLineRevisions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLine interface{}, mods queries.Applicator) error {
	var slice []*Line
	var object *Line

	if singular {
		object = maybeLine.(*Line)
	} else {
		slice = *maybeLine.(*[]*Line)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lineR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lineR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`line_revision`),
		qm.WhereIn(`line_revision.line_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load line_revision")
	}

	var resultSlice []*LineRevision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice line_revision")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on line_revision")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for line_revision")
	}

	if len(lineRevisionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LineRevisions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &lineRevisionR{}
			}
			foreign.R.Line = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LineID {
				local.R.LineRevisions = append(local.R.LineRevisions, foreign)
				if foreign.R == nil {
					foreign.R = &lineRevisionR{}
				}
				foreign.R.Line = local
				break
			}
		}
	}

	return nil
}

// SetPage of the line to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.Lines.
func (o *Line) SetPage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Page) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"line\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
		strmangle.WhereClause("\"", "\"", 2, linePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PageID = related.ID
	if o.R == nil {
		o.R = &lineR{
			Page: related,
		}
	} else {
		o.R.Page = related
	}

	if related.R == nil {
		related.R = &pageR{
			Lines: LineSlice{o},
		}
	} else {
		related.R.Lines = append(related.R.Lines, o)
	}

	return nil
}

// AddLineRevisions adds the given related objects to the existing relationships
// of the line, optionally inserting them as new records.
// Appends related to o.R.LineRevisions.
// Sets related.R.Line appropriately.
func (o *Line) AddLineRevisions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*LineRevision) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LineID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"line_revision\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"line_id"}),
				strmangle.WhereClause("\"", "\"", 2, lineRevisionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LineID = o.ID
		}
	}

	if o.R == nil {
		o.R = &lineR{
			LineRevisions: related,
		}
	} else {
		o.R.LineRevisions = append(o.R.LineRevisions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &lineRevisionR{
				Line: o,
			}
		} else {
			rel.R.Line = o
		}
	}
	return nil
}

// Lines retrieves all the records using an executor.
func Lines(mods ...qm.QueryMod) lineQuery {
	mods = append(mods, qm.From("\"line\""))
	return lineQuery{NewQuery(mods...)}
}

// FindLine retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLine(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Line, error) {
	lineObj := &Line{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"line\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lineObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repo: unable to select from line")
	}

	return lineObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Line) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repo: no line provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lineColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lineInsertCacheMut.RLock()
	cache, cached := lineInsertCache[key]
	lineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lineAllColumns,
			lineColumnsWithDefault,
			lineColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lineType, lineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lineType, lineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"line\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"line\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "repo: unable to insert into line")
	}

	if !cached {
		lineInsertCacheMut.Lock()
		lineInsertCache[key] = cache
		lineInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Line.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Line) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lineUpdateCacheMut.RLock()
	cache, cached := lineUpdateCache[key]
	lineUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lineAllColumns,
			linePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repo: unable to update line, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"line\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, linePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lineType, lineMapping, append(wl, linePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update line row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by update for line")
	}

	if !cached {
		lineUpdateCacheMut.Lock()
		lineUpdateCache[key] = cache
		lineUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q lineQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update all for line")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to retrieve rows affected for line")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LineSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repo: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), linePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"line\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, linePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update all in line slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to retrieve rows affected all in update all line")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Line) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repo: no line provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lineColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lineUpsertCacheMut.RLock()
	cache, cached := lineUpsertCache[key]
	lineUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			lineAllColumns,
			lineColumnsWithDefault,
			lineColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			lineAllColumns,
			linePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("repo: unable to upsert line, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(linePrimaryKeyColumns))
			copy(conflict, linePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"line\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(lineType, lineMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lineType, lineMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "repo: unable to upsert line")
	}

	if !cached {
		lineUpsertCacheMut.Lock()
		lineUpsertCache[key] = cache
		lineUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Line record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Line) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repo: no Line provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), linePrimaryKeyMapping)
	sql := "DELETE FROM \"line\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete from line")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by delete for line")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lineQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repo: no lineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete all from line")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by deleteall for line")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LineSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lineBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), linePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"line\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, linePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete all from line slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by deleteall for line")
	}

	if len(lineAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Line) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLine(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LineSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), linePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"line\".* FROM \"line\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, linePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repo: unable to reload all in LineSlice")
	}

	*o = slice

	return nil
}

// LineExists checks if the Line row exists.
func LineExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"line\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repo: unable to check if line exists")
	}

	return exists, nil
}
