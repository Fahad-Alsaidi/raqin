// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLines(t *testing.T) {
	t.Parallel()

	query := Lines()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLinesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLinesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Lines().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLinesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LineSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLinesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LineExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Line exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LineExists to return true, but got false.")
	}
}

func testLinesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	lineFound, err := FindLine(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if lineFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLinesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Lines().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLinesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Lines().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLinesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	lineOne := &Line{}
	lineTwo := &Line{}
	if err = randomize.Struct(seed, lineOne, lineDBTypes, false, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}
	if err = randomize.Struct(seed, lineTwo, lineDBTypes, false, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lineOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lineTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Lines().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLinesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	lineOne := &Line{}
	lineTwo := &Line{}
	if err = randomize.Struct(seed, lineOne, lineDBTypes, false, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}
	if err = randomize.Struct(seed, lineTwo, lineDBTypes, false, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lineOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lineTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func lineBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Line) error {
	*o = Line{}
	return nil
}

func lineAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Line) error {
	*o = Line{}
	return nil
}

func lineAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Line) error {
	*o = Line{}
	return nil
}

func lineBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Line) error {
	*o = Line{}
	return nil
}

func lineAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Line) error {
	*o = Line{}
	return nil
}

func lineBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Line) error {
	*o = Line{}
	return nil
}

func lineAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Line) error {
	*o = Line{}
	return nil
}

func lineBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Line) error {
	*o = Line{}
	return nil
}

func lineAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Line) error {
	*o = Line{}
	return nil
}

func testLinesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Line{}
	o := &Line{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, lineDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Line object: %s", err)
	}

	AddLineHook(boil.BeforeInsertHook, lineBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	lineBeforeInsertHooks = []LineHook{}

	AddLineHook(boil.AfterInsertHook, lineAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	lineAfterInsertHooks = []LineHook{}

	AddLineHook(boil.AfterSelectHook, lineAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	lineAfterSelectHooks = []LineHook{}

	AddLineHook(boil.BeforeUpdateHook, lineBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	lineBeforeUpdateHooks = []LineHook{}

	AddLineHook(boil.AfterUpdateHook, lineAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	lineAfterUpdateHooks = []LineHook{}

	AddLineHook(boil.BeforeDeleteHook, lineBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	lineBeforeDeleteHooks = []LineHook{}

	AddLineHook(boil.AfterDeleteHook, lineAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	lineAfterDeleteHooks = []LineHook{}

	AddLineHook(boil.BeforeUpsertHook, lineBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	lineBeforeUpsertHooks = []LineHook{}

	AddLineHook(boil.AfterUpsertHook, lineAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	lineAfterUpsertHooks = []LineHook{}
}

func testLinesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLinesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(lineColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Lines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLineToManyLineRevisions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Line
	var b, c LineRevision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, lineRevisionDBTypes, false, lineRevisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lineRevisionDBTypes, false, lineRevisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.LineID = a.ID
	c.LineID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LineRevisions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.LineID == b.LineID {
			bFound = true
		}
		if v.LineID == c.LineID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := LineSlice{&a}
	if err = a.L.LoadLineRevisions(ctx, tx, false, (*[]*Line)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LineRevisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LineRevisions = nil
	if err = a.L.LoadLineRevisions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LineRevisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testLineToManyAddOpLineRevisions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Line
	var b, c, d, e LineRevision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineDBTypes, false, strmangle.SetComplement(linePrimaryKeyColumns, lineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*LineRevision{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, lineRevisionDBTypes, false, strmangle.SetComplement(lineRevisionPrimaryKeyColumns, lineRevisionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*LineRevision{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLineRevisions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.LineID {
			t.Error("foreign key was wrong value", a.ID, first.LineID)
		}
		if a.ID != second.LineID {
			t.Error("foreign key was wrong value", a.ID, second.LineID)
		}

		if first.R.Line != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Line != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LineRevisions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LineRevisions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LineRevisions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testLineToOnePageUsingPage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Line
	var foreign Page

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lineDBTypes, false, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PageID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Page().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LineSlice{&local}
	if err = local.L.LoadPage(ctx, tx, false, (*[]*Line)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Page = nil
	if err = local.L.LoadPage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLineToOneSetOpPageUsingPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Line
	var b, c Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineDBTypes, false, strmangle.SetComplement(linePrimaryKeyColumns, lineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Page{&b, &c} {
		err = a.SetPage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Page != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Lines[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PageID != x.ID {
			t.Error("foreign key was wrong value", a.PageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PageID))
		reflect.Indirect(reflect.ValueOf(&a.PageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PageID != x.ID {
			t.Error("foreign key was wrong value", a.PageID, x.ID)
		}
	}
}

func testLinesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLinesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LineSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLinesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Lines().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	lineDBTypes = map[string]string{`ID`: `int`, `PageID`: `int`, `Path`: `varchar`, `Number`: `int`, `Stage`: `enum('NONE','INIT','REV1','REV2','DONE')`, `LineText`: `text`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_           = bytes.MinRead
)

func testLinesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(linePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(lineAllColumns) == len(linePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lineDBTypes, true, linePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLinesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(lineAllColumns) == len(linePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Line{}
	if err = randomize.Struct(seed, o, lineDBTypes, true, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lineDBTypes, true, linePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(lineAllColumns, linePrimaryKeyColumns) {
		fields = lineAllColumns
	} else {
		fields = strmangle.SetComplement(
			lineAllColumns,
			linePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LineSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLinesUpsert(t *testing.T) {
	t.Parallel()

	if len(lineAllColumns) == len(linePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLLineUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Line{}
	if err = randomize.Struct(seed, &o, lineDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Line: %s", err)
	}

	count, err := Lines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, lineDBTypes, false, linePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Line: %s", err)
	}

	count, err = Lines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
