// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PageRevision is an object representing the database table.
type PageRevision struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ReviewerID int         `boil:"reviewer_id" json:"reviewer_id" toml:"reviewer_id" yaml:"reviewer_id"`
	PageID     int         `boil:"page_id" json:"page_id" toml:"page_id" yaml:"page_id"`
	PageText   null.String `boil:"page_text" json:"page_text,omitempty" toml:"page_text" yaml:"page_text,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt  null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *pageRevisionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pageRevisionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PageRevisionColumns = struct {
	ID         string
	ReviewerID string
	PageID     string
	PageText   string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	ID:         "id",
	ReviewerID: "reviewer_id",
	PageID:     "page_id",
	PageText:   "page_text",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
}

// Generated where

var PageRevisionWhere = struct {
	ID         whereHelperint
	ReviewerID whereHelperint
	PageID     whereHelperint
	PageText   whereHelpernull_String
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	DeletedAt  whereHelpernull_Time
}{
	ID:         whereHelperint{field: "\"page_revision\".\"id\""},
	ReviewerID: whereHelperint{field: "\"page_revision\".\"reviewer_id\""},
	PageID:     whereHelperint{field: "\"page_revision\".\"page_id\""},
	PageText:   whereHelpernull_String{field: "\"page_revision\".\"page_text\""},
	CreatedAt:  whereHelpertime_Time{field: "\"page_revision\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"page_revision\".\"updated_at\""},
	DeletedAt:  whereHelpernull_Time{field: "\"page_revision\".\"deleted_at\""},
}

// PageRevisionRels is where relationship names are stored.
var PageRevisionRels = struct {
	Page     string
	Reviewer string
}{
	Page:     "Page",
	Reviewer: "Reviewer",
}

// pageRevisionR is where relationships are stored.
type pageRevisionR struct {
	Page     *Page `boil:"Page" json:"Page" toml:"Page" yaml:"Page"`
	Reviewer *User `boil:"Reviewer" json:"Reviewer" toml:"Reviewer" yaml:"Reviewer"`
}

// NewStruct creates a new relationship struct
func (*pageRevisionR) NewStruct() *pageRevisionR {
	return &pageRevisionR{}
}

// pageRevisionL is where Load methods for each relationship are stored.
type pageRevisionL struct{}

var (
	pageRevisionAllColumns            = []string{"id", "reviewer_id", "page_id", "page_text", "created_at", "updated_at", "deleted_at"}
	pageRevisionColumnsWithoutDefault = []string{"reviewer_id", "page_id", "page_text", "deleted_at"}
	pageRevisionColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	pageRevisionPrimaryKeyColumns     = []string{"id"}
)

type (
	// PageRevisionSlice is an alias for a slice of pointers to PageRevision.
	// This should generally be used opposed to []PageRevision.
	PageRevisionSlice []*PageRevision
	// PageRevisionHook is the signature for custom PageRevision hook methods
	PageRevisionHook func(context.Context, boil.ContextExecutor, *PageRevision) error

	pageRevisionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pageRevisionType                 = reflect.TypeOf(&PageRevision{})
	pageRevisionMapping              = queries.MakeStructMapping(pageRevisionType)
	pageRevisionPrimaryKeyMapping, _ = queries.BindMapping(pageRevisionType, pageRevisionMapping, pageRevisionPrimaryKeyColumns)
	pageRevisionInsertCacheMut       sync.RWMutex
	pageRevisionInsertCache          = make(map[string]insertCache)
	pageRevisionUpdateCacheMut       sync.RWMutex
	pageRevisionUpdateCache          = make(map[string]updateCache)
	pageRevisionUpsertCacheMut       sync.RWMutex
	pageRevisionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pageRevisionBeforeInsertHooks []PageRevisionHook
var pageRevisionBeforeUpdateHooks []PageRevisionHook
var pageRevisionBeforeDeleteHooks []PageRevisionHook
var pageRevisionBeforeUpsertHooks []PageRevisionHook

var pageRevisionAfterInsertHooks []PageRevisionHook
var pageRevisionAfterSelectHooks []PageRevisionHook
var pageRevisionAfterUpdateHooks []PageRevisionHook
var pageRevisionAfterDeleteHooks []PageRevisionHook
var pageRevisionAfterUpsertHooks []PageRevisionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PageRevision) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PageRevision) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PageRevision) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PageRevision) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PageRevision) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PageRevision) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PageRevision) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PageRevision) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PageRevision) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPageRevisionHook registers your hook function for all future operations.
func AddPageRevisionHook(hookPoint boil.HookPoint, pageRevisionHook PageRevisionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pageRevisionBeforeInsertHooks = append(pageRevisionBeforeInsertHooks, pageRevisionHook)
	case boil.BeforeUpdateHook:
		pageRevisionBeforeUpdateHooks = append(pageRevisionBeforeUpdateHooks, pageRevisionHook)
	case boil.BeforeDeleteHook:
		pageRevisionBeforeDeleteHooks = append(pageRevisionBeforeDeleteHooks, pageRevisionHook)
	case boil.BeforeUpsertHook:
		pageRevisionBeforeUpsertHooks = append(pageRevisionBeforeUpsertHooks, pageRevisionHook)
	case boil.AfterInsertHook:
		pageRevisionAfterInsertHooks = append(pageRevisionAfterInsertHooks, pageRevisionHook)
	case boil.AfterSelectHook:
		pageRevisionAfterSelectHooks = append(pageRevisionAfterSelectHooks, pageRevisionHook)
	case boil.AfterUpdateHook:
		pageRevisionAfterUpdateHooks = append(pageRevisionAfterUpdateHooks, pageRevisionHook)
	case boil.AfterDeleteHook:
		pageRevisionAfterDeleteHooks = append(pageRevisionAfterDeleteHooks, pageRevisionHook)
	case boil.AfterUpsertHook:
		pageRevisionAfterUpsertHooks = append(pageRevisionAfterUpsertHooks, pageRevisionHook)
	}
}

// One returns a single pageRevision record from the query.
func (q pageRevisionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PageRevision, error) {
	o := &PageRevision{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repo: failed to execute a one query for page_revision")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PageRevision records from the query.
func (q pageRevisionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PageRevisionSlice, error) {
	var o []*PageRevision

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repo: failed to assign all query results to PageRevision slice")
	}

	if len(pageRevisionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PageRevision records in the query.
func (q pageRevisionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to count page_revision rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pageRevisionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repo: failed to check if page_revision exists")
	}

	return count > 0, nil
}

// Page pointed to by the foreign key.
func (o *PageRevision) Page(mods ...qm.QueryMod) pageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PageID),
	}

	queryMods = append(queryMods, mods...)

	query := Pages(queryMods...)
	queries.SetFrom(query.Query, "\"page\"")

	return query
}

// Reviewer pointed to by the foreign key.
func (o *PageRevision) Reviewer(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ReviewerID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"user\"")

	return query
}

// LoadPage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pageRevisionL) LoadPage(ctx context.Context, e boil.ContextExecutor, singular bool, maybePageRevision interface{}, mods queries.Applicator) error {
	var slice []*PageRevision
	var object *PageRevision

	if singular {
		object = maybePageRevision.(*PageRevision)
	} else {
		slice = *maybePageRevision.(*[]*PageRevision)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageRevisionR{}
		}
		args = append(args, object.PageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageRevisionR{}
			}

			for _, a := range args {
				if a == obj.PageID {
					continue Outer
				}
			}

			args = append(args, obj.PageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`page`),
		qm.WhereIn(`page.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Page")
	}

	var resultSlice []*Page
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Page")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for page")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for page")
	}

	if len(pageRevisionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Page = foreign
		if foreign.R == nil {
			foreign.R = &pageR{}
		}
		foreign.R.PageRevisions = append(foreign.R.PageRevisions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PageID == foreign.ID {
				local.R.Page = foreign
				if foreign.R == nil {
					foreign.R = &pageR{}
				}
				foreign.R.PageRevisions = append(foreign.R.PageRevisions, local)
				break
			}
		}
	}

	return nil
}

// LoadReviewer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pageRevisionL) LoadReviewer(ctx context.Context, e boil.ContextExecutor, singular bool, maybePageRevision interface{}, mods queries.Applicator) error {
	var slice []*PageRevision
	var object *PageRevision

	if singular {
		object = maybePageRevision.(*PageRevision)
	} else {
		slice = *maybePageRevision.(*[]*PageRevision)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageRevisionR{}
		}
		args = append(args, object.ReviewerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageRevisionR{}
			}

			for _, a := range args {
				if a == obj.ReviewerID {
					continue Outer
				}
			}

			args = append(args, obj.ReviewerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(pageRevisionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reviewer = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ReviewerPageRevisions = append(foreign.R.ReviewerPageRevisions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReviewerID == foreign.ID {
				local.R.Reviewer = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ReviewerPageRevisions = append(foreign.R.ReviewerPageRevisions, local)
				break
			}
		}
	}

	return nil
}

// SetPage of the pageRevision to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.PageRevisions.
func (o *PageRevision) SetPage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Page) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"page_revision\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
		strmangle.WhereClause("\"", "\"", 2, pageRevisionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PageID = related.ID
	if o.R == nil {
		o.R = &pageRevisionR{
			Page: related,
		}
	} else {
		o.R.Page = related
	}

	if related.R == nil {
		related.R = &pageR{
			PageRevisions: PageRevisionSlice{o},
		}
	} else {
		related.R.PageRevisions = append(related.R.PageRevisions, o)
	}

	return nil
}

// SetReviewer of the pageRevision to the related item.
// Sets o.R.Reviewer to related.
// Adds o to related.R.ReviewerPageRevisions.
func (o *PageRevision) SetReviewer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"page_revision\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"reviewer_id"}),
		strmangle.WhereClause("\"", "\"", 2, pageRevisionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReviewerID = related.ID
	if o.R == nil {
		o.R = &pageRevisionR{
			Reviewer: related,
		}
	} else {
		o.R.Reviewer = related
	}

	if related.R == nil {
		related.R = &userR{
			ReviewerPageRevisions: PageRevisionSlice{o},
		}
	} else {
		related.R.ReviewerPageRevisions = append(related.R.ReviewerPageRevisions, o)
	}

	return nil
}

// PageRevisions retrieves all the records using an executor.
func PageRevisions(mods ...qm.QueryMod) pageRevisionQuery {
	mods = append(mods, qm.From("\"page_revision\""))
	return pageRevisionQuery{NewQuery(mods...)}
}

// FindPageRevision retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPageRevision(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PageRevision, error) {
	pageRevisionObj := &PageRevision{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"page_revision\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pageRevisionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repo: unable to select from page_revision")
	}

	return pageRevisionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PageRevision) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repo: no page_revision provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageRevisionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pageRevisionInsertCacheMut.RLock()
	cache, cached := pageRevisionInsertCache[key]
	pageRevisionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pageRevisionAllColumns,
			pageRevisionColumnsWithDefault,
			pageRevisionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pageRevisionType, pageRevisionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pageRevisionType, pageRevisionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"page_revision\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"page_revision\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "repo: unable to insert into page_revision")
	}

	if !cached {
		pageRevisionInsertCacheMut.Lock()
		pageRevisionInsertCache[key] = cache
		pageRevisionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PageRevision.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PageRevision) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pageRevisionUpdateCacheMut.RLock()
	cache, cached := pageRevisionUpdateCache[key]
	pageRevisionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pageRevisionAllColumns,
			pageRevisionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repo: unable to update page_revision, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"page_revision\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pageRevisionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pageRevisionType, pageRevisionMapping, append(wl, pageRevisionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update page_revision row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by update for page_revision")
	}

	if !cached {
		pageRevisionUpdateCacheMut.Lock()
		pageRevisionUpdateCache[key] = cache
		pageRevisionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pageRevisionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update all for page_revision")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to retrieve rows affected for page_revision")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PageRevisionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repo: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageRevisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"page_revision\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pageRevisionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update all in pageRevision slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to retrieve rows affected all in update all pageRevision")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PageRevision) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repo: no page_revision provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageRevisionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pageRevisionUpsertCacheMut.RLock()
	cache, cached := pageRevisionUpsertCache[key]
	pageRevisionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pageRevisionAllColumns,
			pageRevisionColumnsWithDefault,
			pageRevisionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pageRevisionAllColumns,
			pageRevisionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("repo: unable to upsert page_revision, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pageRevisionPrimaryKeyColumns))
			copy(conflict, pageRevisionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"page_revision\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pageRevisionType, pageRevisionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pageRevisionType, pageRevisionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "repo: unable to upsert page_revision")
	}

	if !cached {
		pageRevisionUpsertCacheMut.Lock()
		pageRevisionUpsertCache[key] = cache
		pageRevisionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PageRevision record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PageRevision) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repo: no PageRevision provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pageRevisionPrimaryKeyMapping)
	sql := "DELETE FROM \"page_revision\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete from page_revision")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by delete for page_revision")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pageRevisionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repo: no pageRevisionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete all from page_revision")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by deleteall for page_revision")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PageRevisionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pageRevisionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageRevisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"page_revision\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pageRevisionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete all from pageRevision slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by deleteall for page_revision")
	}

	if len(pageRevisionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PageRevision) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPageRevision(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PageRevisionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PageRevisionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageRevisionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"page_revision\".* FROM \"page_revision\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pageRevisionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repo: unable to reload all in PageRevisionSlice")
	}

	*o = slice

	return nil
}

// PageRevisionExists checks if the PageRevision row exists.
func PageRevisionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"page_revision\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repo: unable to check if page_revision exists")
	}

	return exists, nil
}
