// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLineRevisionReactions(t *testing.T) {
	t.Parallel()

	query := LineRevisionReactions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLineRevisionReactionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LineRevisionReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLineRevisionReactionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LineRevisionReactions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LineRevisionReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLineRevisionReactionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LineRevisionReactionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LineRevisionReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLineRevisionReactionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LineRevisionReactionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LineRevisionReaction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LineRevisionReactionExists to return true, but got false.")
	}
}

func testLineRevisionReactionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	lineRevisionReactionFound, err := FindLineRevisionReaction(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if lineRevisionReactionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLineRevisionReactionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LineRevisionReactions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLineRevisionReactionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LineRevisionReactions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLineRevisionReactionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	lineRevisionReactionOne := &LineRevisionReaction{}
	lineRevisionReactionTwo := &LineRevisionReaction{}
	if err = randomize.Struct(seed, lineRevisionReactionOne, lineRevisionReactionDBTypes, false, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}
	if err = randomize.Struct(seed, lineRevisionReactionTwo, lineRevisionReactionDBTypes, false, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lineRevisionReactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lineRevisionReactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LineRevisionReactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLineRevisionReactionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	lineRevisionReactionOne := &LineRevisionReaction{}
	lineRevisionReactionTwo := &LineRevisionReaction{}
	if err = randomize.Struct(seed, lineRevisionReactionOne, lineRevisionReactionDBTypes, false, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}
	if err = randomize.Struct(seed, lineRevisionReactionTwo, lineRevisionReactionDBTypes, false, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lineRevisionReactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lineRevisionReactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LineRevisionReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func lineRevisionReactionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionReaction) error {
	*o = LineRevisionReaction{}
	return nil
}

func lineRevisionReactionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionReaction) error {
	*o = LineRevisionReaction{}
	return nil
}

func lineRevisionReactionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionReaction) error {
	*o = LineRevisionReaction{}
	return nil
}

func lineRevisionReactionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionReaction) error {
	*o = LineRevisionReaction{}
	return nil
}

func lineRevisionReactionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionReaction) error {
	*o = LineRevisionReaction{}
	return nil
}

func lineRevisionReactionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionReaction) error {
	*o = LineRevisionReaction{}
	return nil
}

func lineRevisionReactionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionReaction) error {
	*o = LineRevisionReaction{}
	return nil
}

func lineRevisionReactionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionReaction) error {
	*o = LineRevisionReaction{}
	return nil
}

func lineRevisionReactionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LineRevisionReaction) error {
	*o = LineRevisionReaction{}
	return nil
}

func testLineRevisionReactionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &LineRevisionReaction{}
	o := &LineRevisionReaction{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction object: %s", err)
	}

	AddLineRevisionReactionHook(boil.BeforeInsertHook, lineRevisionReactionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	lineRevisionReactionBeforeInsertHooks = []LineRevisionReactionHook{}

	AddLineRevisionReactionHook(boil.AfterInsertHook, lineRevisionReactionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	lineRevisionReactionAfterInsertHooks = []LineRevisionReactionHook{}

	AddLineRevisionReactionHook(boil.AfterSelectHook, lineRevisionReactionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	lineRevisionReactionAfterSelectHooks = []LineRevisionReactionHook{}

	AddLineRevisionReactionHook(boil.BeforeUpdateHook, lineRevisionReactionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	lineRevisionReactionBeforeUpdateHooks = []LineRevisionReactionHook{}

	AddLineRevisionReactionHook(boil.AfterUpdateHook, lineRevisionReactionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	lineRevisionReactionAfterUpdateHooks = []LineRevisionReactionHook{}

	AddLineRevisionReactionHook(boil.BeforeDeleteHook, lineRevisionReactionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	lineRevisionReactionBeforeDeleteHooks = []LineRevisionReactionHook{}

	AddLineRevisionReactionHook(boil.AfterDeleteHook, lineRevisionReactionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	lineRevisionReactionAfterDeleteHooks = []LineRevisionReactionHook{}

	AddLineRevisionReactionHook(boil.BeforeUpsertHook, lineRevisionReactionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	lineRevisionReactionBeforeUpsertHooks = []LineRevisionReactionHook{}

	AddLineRevisionReactionHook(boil.AfterUpsertHook, lineRevisionReactionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	lineRevisionReactionAfterUpsertHooks = []LineRevisionReactionHook{}
}

func testLineRevisionReactionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LineRevisionReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLineRevisionReactionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(lineRevisionReactionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LineRevisionReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLineRevisionReactionToOneLineRevisionUsingLineRevision(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LineRevisionReaction
	var foreign LineRevision

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lineRevisionReactionDBTypes, false, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, lineRevisionDBTypes, false, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LineRevisionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LineRevision().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LineRevisionReactionSlice{&local}
	if err = local.L.LoadLineRevision(ctx, tx, false, (*[]*LineRevisionReaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LineRevision == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LineRevision = nil
	if err = local.L.LoadLineRevision(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LineRevision == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLineRevisionReactionToOneUserUsingReactor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LineRevisionReaction
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lineRevisionReactionDBTypes, false, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ReactorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Reactor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LineRevisionReactionSlice{&local}
	if err = local.L.LoadReactor(ctx, tx, false, (*[]*LineRevisionReaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Reactor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Reactor = nil
	if err = local.L.LoadReactor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Reactor == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLineRevisionReactionToOneSetOpLineRevisionUsingLineRevision(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevisionReaction
	var b, c LineRevision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionReactionDBTypes, false, strmangle.SetComplement(lineRevisionReactionPrimaryKeyColumns, lineRevisionReactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, lineRevisionDBTypes, false, strmangle.SetComplement(lineRevisionPrimaryKeyColumns, lineRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lineRevisionDBTypes, false, strmangle.SetComplement(lineRevisionPrimaryKeyColumns, lineRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*LineRevision{&b, &c} {
		err = a.SetLineRevision(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LineRevision != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LineRevisionReactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LineRevisionID != x.ID {
			t.Error("foreign key was wrong value", a.LineRevisionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LineRevisionID))
		reflect.Indirect(reflect.ValueOf(&a.LineRevisionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LineRevisionID != x.ID {
			t.Error("foreign key was wrong value", a.LineRevisionID, x.ID)
		}
	}
}
func testLineRevisionReactionToOneSetOpUserUsingReactor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevisionReaction
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionReactionDBTypes, false, strmangle.SetComplement(lineRevisionReactionPrimaryKeyColumns, lineRevisionReactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetReactor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Reactor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ReactorLineRevisionReactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ReactorID != x.ID {
			t.Error("foreign key was wrong value", a.ReactorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ReactorID))
		reflect.Indirect(reflect.ValueOf(&a.ReactorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ReactorID != x.ID {
			t.Error("foreign key was wrong value", a.ReactorID, x.ID)
		}
	}
}

func testLineRevisionReactionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLineRevisionReactionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LineRevisionReactionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLineRevisionReactionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LineRevisionReactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	lineRevisionReactionDBTypes = map[string]string{`ID`: `int`, `LineRevisionID`: `int`, `ReactorID`: `int`, `Reaction`: `enum('NONE','APPROVE','DISAPPROVE')`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                           = bytes.MinRead
)

func testLineRevisionReactionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(lineRevisionReactionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(lineRevisionReactionAllColumns) == len(lineRevisionReactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LineRevisionReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLineRevisionReactionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(lineRevisionReactionAllColumns) == len(lineRevisionReactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LineRevisionReaction{}
	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LineRevisionReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lineRevisionReactionDBTypes, true, lineRevisionReactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(lineRevisionReactionAllColumns, lineRevisionReactionPrimaryKeyColumns) {
		fields = lineRevisionReactionAllColumns
	} else {
		fields = strmangle.SetComplement(
			lineRevisionReactionAllColumns,
			lineRevisionReactionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LineRevisionReactionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLineRevisionReactionsUpsert(t *testing.T) {
	t.Parallel()

	if len(lineRevisionReactionAllColumns) == len(lineRevisionReactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLLineRevisionReactionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LineRevisionReaction{}
	if err = randomize.Struct(seed, &o, lineRevisionReactionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LineRevisionReaction: %s", err)
	}

	count, err := LineRevisionReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, lineRevisionReactionDBTypes, false, lineRevisionReactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LineRevisionReaction struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LineRevisionReaction: %s", err)
	}

	count, err = LineRevisionReactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
