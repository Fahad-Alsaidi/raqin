// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPageRevisions(t *testing.T) {
	t.Parallel()

	query := PageRevisions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPageRevisionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PageRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPageRevisionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PageRevisions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PageRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPageRevisionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PageRevisionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PageRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPageRevisionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PageRevisionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PageRevision exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PageRevisionExists to return true, but got false.")
	}
}

func testPageRevisionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pageRevisionFound, err := FindPageRevision(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if pageRevisionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPageRevisionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PageRevisions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPageRevisionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PageRevisions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPageRevisionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pageRevisionOne := &PageRevision{}
	pageRevisionTwo := &PageRevision{}
	if err = randomize.Struct(seed, pageRevisionOne, pageRevisionDBTypes, false, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}
	if err = randomize.Struct(seed, pageRevisionTwo, pageRevisionDBTypes, false, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pageRevisionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pageRevisionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PageRevisions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPageRevisionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pageRevisionOne := &PageRevision{}
	pageRevisionTwo := &PageRevision{}
	if err = randomize.Struct(seed, pageRevisionOne, pageRevisionDBTypes, false, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}
	if err = randomize.Struct(seed, pageRevisionTwo, pageRevisionDBTypes, false, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pageRevisionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pageRevisionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PageRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pageRevisionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PageRevision) error {
	*o = PageRevision{}
	return nil
}

func pageRevisionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PageRevision) error {
	*o = PageRevision{}
	return nil
}

func pageRevisionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PageRevision) error {
	*o = PageRevision{}
	return nil
}

func pageRevisionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PageRevision) error {
	*o = PageRevision{}
	return nil
}

func pageRevisionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PageRevision) error {
	*o = PageRevision{}
	return nil
}

func pageRevisionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PageRevision) error {
	*o = PageRevision{}
	return nil
}

func pageRevisionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PageRevision) error {
	*o = PageRevision{}
	return nil
}

func pageRevisionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PageRevision) error {
	*o = PageRevision{}
	return nil
}

func pageRevisionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PageRevision) error {
	*o = PageRevision{}
	return nil
}

func testPageRevisionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PageRevision{}
	o := &PageRevision{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PageRevision object: %s", err)
	}

	AddPageRevisionHook(boil.BeforeInsertHook, pageRevisionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pageRevisionBeforeInsertHooks = []PageRevisionHook{}

	AddPageRevisionHook(boil.AfterInsertHook, pageRevisionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pageRevisionAfterInsertHooks = []PageRevisionHook{}

	AddPageRevisionHook(boil.AfterSelectHook, pageRevisionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pageRevisionAfterSelectHooks = []PageRevisionHook{}

	AddPageRevisionHook(boil.BeforeUpdateHook, pageRevisionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pageRevisionBeforeUpdateHooks = []PageRevisionHook{}

	AddPageRevisionHook(boil.AfterUpdateHook, pageRevisionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pageRevisionAfterUpdateHooks = []PageRevisionHook{}

	AddPageRevisionHook(boil.BeforeDeleteHook, pageRevisionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pageRevisionBeforeDeleteHooks = []PageRevisionHook{}

	AddPageRevisionHook(boil.AfterDeleteHook, pageRevisionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pageRevisionAfterDeleteHooks = []PageRevisionHook{}

	AddPageRevisionHook(boil.BeforeUpsertHook, pageRevisionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pageRevisionBeforeUpsertHooks = []PageRevisionHook{}

	AddPageRevisionHook(boil.AfterUpsertHook, pageRevisionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pageRevisionAfterUpsertHooks = []PageRevisionHook{}
}

func testPageRevisionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PageRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPageRevisionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pageRevisionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PageRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPageRevisionToManyApprovedRevisionPages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PageRevision
	var b, c Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ApprovedRevision, a.ID)
	queries.Assign(&c.ApprovedRevision, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ApprovedRevisionPages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ApprovedRevision, b.ApprovedRevision) {
			bFound = true
		}
		if queries.Equal(v.ApprovedRevision, c.ApprovedRevision) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PageRevisionSlice{&a}
	if err = a.L.LoadApprovedRevisionPages(ctx, tx, false, (*[]*PageRevision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ApprovedRevisionPages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ApprovedRevisionPages = nil
	if err = a.L.LoadApprovedRevisionPages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ApprovedRevisionPages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPageRevisionToManyPageRevisionComments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PageRevision
	var b, c PageRevisionComment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pageRevisionCommentDBTypes, false, pageRevisionCommentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageRevisionCommentDBTypes, false, pageRevisionCommentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PageRevisionID = a.ID
	c.PageRevisionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PageRevisionComments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PageRevisionID == b.PageRevisionID {
			bFound = true
		}
		if v.PageRevisionID == c.PageRevisionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PageRevisionSlice{&a}
	if err = a.L.LoadPageRevisionComments(ctx, tx, false, (*[]*PageRevision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageRevisionComments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PageRevisionComments = nil
	if err = a.L.LoadPageRevisionComments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageRevisionComments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPageRevisionToManyPageRevisionReactions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PageRevision
	var b, c PageRevisionReaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pageRevisionReactionDBTypes, false, pageRevisionReactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageRevisionReactionDBTypes, false, pageRevisionReactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PageRevisionID = a.ID
	c.PageRevisionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PageRevisionReactions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PageRevisionID == b.PageRevisionID {
			bFound = true
		}
		if v.PageRevisionID == c.PageRevisionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PageRevisionSlice{&a}
	if err = a.L.LoadPageRevisionReactions(ctx, tx, false, (*[]*PageRevision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageRevisionReactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PageRevisionReactions = nil
	if err = a.L.LoadPageRevisionReactions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageRevisionReactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPageRevisionToManyAddOpApprovedRevisionPages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PageRevision
	var b, c, d, e Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageRevisionDBTypes, false, strmangle.SetComplement(pageRevisionPrimaryKeyColumns, pageRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Page{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Page{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddApprovedRevisionPages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ApprovedRevision) {
			t.Error("foreign key was wrong value", a.ID, first.ApprovedRevision)
		}
		if !queries.Equal(a.ID, second.ApprovedRevision) {
			t.Error("foreign key was wrong value", a.ID, second.ApprovedRevision)
		}

		if first.R.ApprovedRevisionPageRevision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ApprovedRevisionPageRevision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ApprovedRevisionPages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ApprovedRevisionPages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ApprovedRevisionPages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPageRevisionToManySetOpApprovedRevisionPages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PageRevision
	var b, c, d, e Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageRevisionDBTypes, false, strmangle.SetComplement(pageRevisionPrimaryKeyColumns, pageRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Page{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetApprovedRevisionPages(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ApprovedRevisionPages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetApprovedRevisionPages(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ApprovedRevisionPages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ApprovedRevision) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ApprovedRevision) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ApprovedRevision) {
		t.Error("foreign key was wrong value", a.ID, d.ApprovedRevision)
	}
	if !queries.Equal(a.ID, e.ApprovedRevision) {
		t.Error("foreign key was wrong value", a.ID, e.ApprovedRevision)
	}

	if b.R.ApprovedRevisionPageRevision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ApprovedRevisionPageRevision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ApprovedRevisionPageRevision != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ApprovedRevisionPageRevision != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ApprovedRevisionPages[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ApprovedRevisionPages[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPageRevisionToManyRemoveOpApprovedRevisionPages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PageRevision
	var b, c, d, e Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageRevisionDBTypes, false, strmangle.SetComplement(pageRevisionPrimaryKeyColumns, pageRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Page{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddApprovedRevisionPages(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ApprovedRevisionPages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveApprovedRevisionPages(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ApprovedRevisionPages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ApprovedRevision) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ApprovedRevision) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ApprovedRevisionPageRevision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ApprovedRevisionPageRevision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ApprovedRevisionPageRevision != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ApprovedRevisionPageRevision != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ApprovedRevisionPages) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ApprovedRevisionPages[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ApprovedRevisionPages[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPageRevisionToManyAddOpPageRevisionComments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PageRevision
	var b, c, d, e PageRevisionComment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageRevisionDBTypes, false, strmangle.SetComplement(pageRevisionPrimaryKeyColumns, pageRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PageRevisionComment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pageRevisionCommentDBTypes, false, strmangle.SetComplement(pageRevisionCommentPrimaryKeyColumns, pageRevisionCommentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PageRevisionComment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPageRevisionComments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PageRevisionID {
			t.Error("foreign key was wrong value", a.ID, first.PageRevisionID)
		}
		if a.ID != second.PageRevisionID {
			t.Error("foreign key was wrong value", a.ID, second.PageRevisionID)
		}

		if first.R.PageRevision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PageRevision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PageRevisionComments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PageRevisionComments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PageRevisionComments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPageRevisionToManyAddOpPageRevisionReactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PageRevision
	var b, c, d, e PageRevisionReaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageRevisionDBTypes, false, strmangle.SetComplement(pageRevisionPrimaryKeyColumns, pageRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PageRevisionReaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pageRevisionReactionDBTypes, false, strmangle.SetComplement(pageRevisionReactionPrimaryKeyColumns, pageRevisionReactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PageRevisionReaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPageRevisionReactions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PageRevisionID {
			t.Error("foreign key was wrong value", a.ID, first.PageRevisionID)
		}
		if a.ID != second.PageRevisionID {
			t.Error("foreign key was wrong value", a.ID, second.PageRevisionID)
		}

		if first.R.PageRevision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PageRevision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PageRevisionReactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PageRevisionReactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PageRevisionReactions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPageRevisionToOneUserUsingReviewer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PageRevision
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pageRevisionDBTypes, false, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ReviewerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Reviewer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PageRevisionSlice{&local}
	if err = local.L.LoadReviewer(ctx, tx, false, (*[]*PageRevision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Reviewer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Reviewer = nil
	if err = local.L.LoadReviewer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Reviewer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPageRevisionToOnePageUsingPage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PageRevision
	var foreign Page

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pageRevisionDBTypes, false, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PageID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Page().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PageRevisionSlice{&local}
	if err = local.L.LoadPage(ctx, tx, false, (*[]*PageRevision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Page = nil
	if err = local.L.LoadPage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPageRevisionToOneSetOpUserUsingReviewer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PageRevision
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageRevisionDBTypes, false, strmangle.SetComplement(pageRevisionPrimaryKeyColumns, pageRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetReviewer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Reviewer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ReviewerPageRevisions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ReviewerID != x.ID {
			t.Error("foreign key was wrong value", a.ReviewerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ReviewerID))
		reflect.Indirect(reflect.ValueOf(&a.ReviewerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ReviewerID != x.ID {
			t.Error("foreign key was wrong value", a.ReviewerID, x.ID)
		}
	}
}
func testPageRevisionToOneSetOpPageUsingPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PageRevision
	var b, c Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageRevisionDBTypes, false, strmangle.SetComplement(pageRevisionPrimaryKeyColumns, pageRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Page{&b, &c} {
		err = a.SetPage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Page != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PageRevisions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PageID != x.ID {
			t.Error("foreign key was wrong value", a.PageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PageID))
		reflect.Indirect(reflect.ValueOf(&a.PageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PageID != x.ID {
			t.Error("foreign key was wrong value", a.PageID, x.ID)
		}
	}
}

func testPageRevisionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPageRevisionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PageRevisionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPageRevisionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PageRevisions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pageRevisionDBTypes = map[string]string{`ID`: `int`, `ReviewerID`: `int`, `PageID`: `int`, `PageText`: `text`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                   = bytes.MinRead
)

func testPageRevisionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pageRevisionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pageRevisionAllColumns) == len(pageRevisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PageRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPageRevisionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pageRevisionAllColumns) == len(pageRevisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PageRevision{}
	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PageRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pageRevisionDBTypes, true, pageRevisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pageRevisionAllColumns, pageRevisionPrimaryKeyColumns) {
		fields = pageRevisionAllColumns
	} else {
		fields = strmangle.SetComplement(
			pageRevisionAllColumns,
			pageRevisionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PageRevisionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPageRevisionsUpsert(t *testing.T) {
	t.Parallel()

	if len(pageRevisionAllColumns) == len(pageRevisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPageRevisionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PageRevision{}
	if err = randomize.Struct(seed, &o, pageRevisionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PageRevision: %s", err)
	}

	count, err := PageRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pageRevisionDBTypes, false, pageRevisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PageRevision struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PageRevision: %s", err)
	}

	count, err = PageRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
