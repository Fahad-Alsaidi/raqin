// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLineRevisions(t *testing.T) {
	t.Parallel()

	query := LineRevisions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLineRevisionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LineRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLineRevisionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LineRevisions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LineRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLineRevisionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LineRevisionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LineRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLineRevisionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LineRevisionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LineRevision exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LineRevisionExists to return true, but got false.")
	}
}

func testLineRevisionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	lineRevisionFound, err := FindLineRevision(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if lineRevisionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLineRevisionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LineRevisions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLineRevisionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LineRevisions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLineRevisionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	lineRevisionOne := &LineRevision{}
	lineRevisionTwo := &LineRevision{}
	if err = randomize.Struct(seed, lineRevisionOne, lineRevisionDBTypes, false, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}
	if err = randomize.Struct(seed, lineRevisionTwo, lineRevisionDBTypes, false, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lineRevisionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lineRevisionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LineRevisions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLineRevisionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	lineRevisionOne := &LineRevision{}
	lineRevisionTwo := &LineRevision{}
	if err = randomize.Struct(seed, lineRevisionOne, lineRevisionDBTypes, false, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}
	if err = randomize.Struct(seed, lineRevisionTwo, lineRevisionDBTypes, false, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lineRevisionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lineRevisionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LineRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func lineRevisionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *LineRevision) error {
	*o = LineRevision{}
	return nil
}

func lineRevisionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *LineRevision) error {
	*o = LineRevision{}
	return nil
}

func lineRevisionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *LineRevision) error {
	*o = LineRevision{}
	return nil
}

func lineRevisionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LineRevision) error {
	*o = LineRevision{}
	return nil
}

func lineRevisionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LineRevision) error {
	*o = LineRevision{}
	return nil
}

func lineRevisionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LineRevision) error {
	*o = LineRevision{}
	return nil
}

func lineRevisionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LineRevision) error {
	*o = LineRevision{}
	return nil
}

func lineRevisionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LineRevision) error {
	*o = LineRevision{}
	return nil
}

func lineRevisionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LineRevision) error {
	*o = LineRevision{}
	return nil
}

func testLineRevisionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &LineRevision{}
	o := &LineRevision{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LineRevision object: %s", err)
	}

	AddLineRevisionHook(boil.BeforeInsertHook, lineRevisionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	lineRevisionBeforeInsertHooks = []LineRevisionHook{}

	AddLineRevisionHook(boil.AfterInsertHook, lineRevisionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	lineRevisionAfterInsertHooks = []LineRevisionHook{}

	AddLineRevisionHook(boil.AfterSelectHook, lineRevisionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	lineRevisionAfterSelectHooks = []LineRevisionHook{}

	AddLineRevisionHook(boil.BeforeUpdateHook, lineRevisionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	lineRevisionBeforeUpdateHooks = []LineRevisionHook{}

	AddLineRevisionHook(boil.AfterUpdateHook, lineRevisionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	lineRevisionAfterUpdateHooks = []LineRevisionHook{}

	AddLineRevisionHook(boil.BeforeDeleteHook, lineRevisionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	lineRevisionBeforeDeleteHooks = []LineRevisionHook{}

	AddLineRevisionHook(boil.AfterDeleteHook, lineRevisionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	lineRevisionAfterDeleteHooks = []LineRevisionHook{}

	AddLineRevisionHook(boil.BeforeUpsertHook, lineRevisionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	lineRevisionBeforeUpsertHooks = []LineRevisionHook{}

	AddLineRevisionHook(boil.AfterUpsertHook, lineRevisionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	lineRevisionAfterUpsertHooks = []LineRevisionHook{}
}

func testLineRevisionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LineRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLineRevisionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(lineRevisionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LineRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLineRevisionToManyApprovedRevisionLines(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevision
	var b, c Line

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, lineDBTypes, false, lineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lineDBTypes, false, lineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ApprovedRevision, a.ID)
	queries.Assign(&c.ApprovedRevision, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ApprovedRevisionLines().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ApprovedRevision, b.ApprovedRevision) {
			bFound = true
		}
		if queries.Equal(v.ApprovedRevision, c.ApprovedRevision) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := LineRevisionSlice{&a}
	if err = a.L.LoadApprovedRevisionLines(ctx, tx, false, (*[]*LineRevision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ApprovedRevisionLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ApprovedRevisionLines = nil
	if err = a.L.LoadApprovedRevisionLines(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ApprovedRevisionLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testLineRevisionToManyLineRevisionComments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevision
	var b, c LineRevisionComment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, lineRevisionCommentDBTypes, false, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lineRevisionCommentDBTypes, false, lineRevisionCommentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.LineRevisionID = a.ID
	c.LineRevisionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LineRevisionComments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.LineRevisionID == b.LineRevisionID {
			bFound = true
		}
		if v.LineRevisionID == c.LineRevisionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := LineRevisionSlice{&a}
	if err = a.L.LoadLineRevisionComments(ctx, tx, false, (*[]*LineRevision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LineRevisionComments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LineRevisionComments = nil
	if err = a.L.LoadLineRevisionComments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LineRevisionComments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testLineRevisionToManyLineRevisionReactions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevision
	var b, c LineRevisionReaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, lineRevisionReactionDBTypes, false, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lineRevisionReactionDBTypes, false, lineRevisionReactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.LineRevisionID = a.ID
	c.LineRevisionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LineRevisionReactions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.LineRevisionID == b.LineRevisionID {
			bFound = true
		}
		if v.LineRevisionID == c.LineRevisionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := LineRevisionSlice{&a}
	if err = a.L.LoadLineRevisionReactions(ctx, tx, false, (*[]*LineRevision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LineRevisionReactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LineRevisionReactions = nil
	if err = a.L.LoadLineRevisionReactions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LineRevisionReactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testLineRevisionToManyAddOpApprovedRevisionLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevision
	var b, c, d, e Line

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionDBTypes, false, strmangle.SetComplement(lineRevisionPrimaryKeyColumns, lineRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Line{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, lineDBTypes, false, strmangle.SetComplement(linePrimaryKeyColumns, lineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Line{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddApprovedRevisionLines(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ApprovedRevision) {
			t.Error("foreign key was wrong value", a.ID, first.ApprovedRevision)
		}
		if !queries.Equal(a.ID, second.ApprovedRevision) {
			t.Error("foreign key was wrong value", a.ID, second.ApprovedRevision)
		}

		if first.R.ApprovedRevisionLineRevision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ApprovedRevisionLineRevision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ApprovedRevisionLines[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ApprovedRevisionLines[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ApprovedRevisionLines().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testLineRevisionToManySetOpApprovedRevisionLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevision
	var b, c, d, e Line

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionDBTypes, false, strmangle.SetComplement(lineRevisionPrimaryKeyColumns, lineRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Line{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, lineDBTypes, false, strmangle.SetComplement(linePrimaryKeyColumns, lineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetApprovedRevisionLines(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ApprovedRevisionLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetApprovedRevisionLines(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ApprovedRevisionLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ApprovedRevision) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ApprovedRevision) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ApprovedRevision) {
		t.Error("foreign key was wrong value", a.ID, d.ApprovedRevision)
	}
	if !queries.Equal(a.ID, e.ApprovedRevision) {
		t.Error("foreign key was wrong value", a.ID, e.ApprovedRevision)
	}

	if b.R.ApprovedRevisionLineRevision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ApprovedRevisionLineRevision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ApprovedRevisionLineRevision != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ApprovedRevisionLineRevision != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ApprovedRevisionLines[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ApprovedRevisionLines[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testLineRevisionToManyRemoveOpApprovedRevisionLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevision
	var b, c, d, e Line

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionDBTypes, false, strmangle.SetComplement(lineRevisionPrimaryKeyColumns, lineRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Line{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, lineDBTypes, false, strmangle.SetComplement(linePrimaryKeyColumns, lineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddApprovedRevisionLines(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ApprovedRevisionLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveApprovedRevisionLines(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ApprovedRevisionLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ApprovedRevision) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ApprovedRevision) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ApprovedRevisionLineRevision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ApprovedRevisionLineRevision != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ApprovedRevisionLineRevision != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ApprovedRevisionLineRevision != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ApprovedRevisionLines) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ApprovedRevisionLines[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ApprovedRevisionLines[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testLineRevisionToManyAddOpLineRevisionComments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevision
	var b, c, d, e LineRevisionComment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionDBTypes, false, strmangle.SetComplement(lineRevisionPrimaryKeyColumns, lineRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*LineRevisionComment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, lineRevisionCommentDBTypes, false, strmangle.SetComplement(lineRevisionCommentPrimaryKeyColumns, lineRevisionCommentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*LineRevisionComment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLineRevisionComments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.LineRevisionID {
			t.Error("foreign key was wrong value", a.ID, first.LineRevisionID)
		}
		if a.ID != second.LineRevisionID {
			t.Error("foreign key was wrong value", a.ID, second.LineRevisionID)
		}

		if first.R.LineRevision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.LineRevision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LineRevisionComments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LineRevisionComments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LineRevisionComments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testLineRevisionToManyAddOpLineRevisionReactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevision
	var b, c, d, e LineRevisionReaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionDBTypes, false, strmangle.SetComplement(lineRevisionPrimaryKeyColumns, lineRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*LineRevisionReaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, lineRevisionReactionDBTypes, false, strmangle.SetComplement(lineRevisionReactionPrimaryKeyColumns, lineRevisionReactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*LineRevisionReaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLineRevisionReactions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.LineRevisionID {
			t.Error("foreign key was wrong value", a.ID, first.LineRevisionID)
		}
		if a.ID != second.LineRevisionID {
			t.Error("foreign key was wrong value", a.ID, second.LineRevisionID)
		}

		if first.R.LineRevision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.LineRevision != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LineRevisionReactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LineRevisionReactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LineRevisionReactions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testLineRevisionToOneUserUsingReviewer(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LineRevision
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lineRevisionDBTypes, false, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ReviewerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Reviewer().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LineRevisionSlice{&local}
	if err = local.L.LoadReviewer(ctx, tx, false, (*[]*LineRevision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Reviewer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Reviewer = nil
	if err = local.L.LoadReviewer(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Reviewer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLineRevisionToOneLineUsingLine(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LineRevision
	var foreign Line

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lineRevisionDBTypes, false, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, lineDBTypes, false, lineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Line struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LineID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Line().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LineRevisionSlice{&local}
	if err = local.L.LoadLine(ctx, tx, false, (*[]*LineRevision)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Line == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Line = nil
	if err = local.L.LoadLine(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Line == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLineRevisionToOneSetOpUserUsingReviewer(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevision
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionDBTypes, false, strmangle.SetComplement(lineRevisionPrimaryKeyColumns, lineRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetReviewer(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Reviewer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ReviewerLineRevisions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ReviewerID != x.ID {
			t.Error("foreign key was wrong value", a.ReviewerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ReviewerID))
		reflect.Indirect(reflect.ValueOf(&a.ReviewerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ReviewerID != x.ID {
			t.Error("foreign key was wrong value", a.ReviewerID, x.ID)
		}
	}
}
func testLineRevisionToOneSetOpLineUsingLine(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LineRevision
	var b, c Line

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lineRevisionDBTypes, false, strmangle.SetComplement(lineRevisionPrimaryKeyColumns, lineRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, lineDBTypes, false, strmangle.SetComplement(linePrimaryKeyColumns, lineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lineDBTypes, false, strmangle.SetComplement(linePrimaryKeyColumns, lineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Line{&b, &c} {
		err = a.SetLine(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Line != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LineRevisions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LineID != x.ID {
			t.Error("foreign key was wrong value", a.LineID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LineID))
		reflect.Indirect(reflect.ValueOf(&a.LineID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LineID != x.ID {
			t.Error("foreign key was wrong value", a.LineID, x.ID)
		}
	}
}

func testLineRevisionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLineRevisionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LineRevisionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLineRevisionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LineRevisions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	lineRevisionDBTypes = map[string]string{`ID`: `int`, `ReviewerID`: `int`, `LineID`: `int`, `LineText`: `text`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                   = bytes.MinRead
)

func testLineRevisionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(lineRevisionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(lineRevisionAllColumns) == len(lineRevisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LineRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLineRevisionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(lineRevisionAllColumns) == len(lineRevisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LineRevision{}
	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LineRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lineRevisionDBTypes, true, lineRevisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(lineRevisionAllColumns, lineRevisionPrimaryKeyColumns) {
		fields = lineRevisionAllColumns
	} else {
		fields = strmangle.SetComplement(
			lineRevisionAllColumns,
			lineRevisionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LineRevisionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLineRevisionsUpsert(t *testing.T) {
	t.Parallel()

	if len(lineRevisionAllColumns) == len(lineRevisionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLLineRevisionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LineRevision{}
	if err = randomize.Struct(seed, &o, lineRevisionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LineRevision: %s", err)
	}

	count, err := LineRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, lineRevisionDBTypes, false, lineRevisionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LineRevision struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LineRevision: %s", err)
	}

	count, err = LineRevisions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
