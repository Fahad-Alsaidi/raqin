// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Activities", testActivities)
	t.Run("Authors", testAuthors)
	t.Run("Books", testBooks)
	t.Run("BookAuthors", testBookAuthors)
	t.Run("BookCategories", testBookCategories)
	t.Run("BookInitiaters", testBookInitiaters)
	t.Run("Categories", testCategories)
	t.Run("Lines", testLines)
	t.Run("LineRevisions", testLineRevisions)
	t.Run("Pages", testPages)
	t.Run("PageRevisions", testPageRevisions)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Activities", testActivitiesDelete)
	t.Run("Authors", testAuthorsDelete)
	t.Run("Books", testBooksDelete)
	t.Run("BookAuthors", testBookAuthorsDelete)
	t.Run("BookCategories", testBookCategoriesDelete)
	t.Run("BookInitiaters", testBookInitiatersDelete)
	t.Run("Categories", testCategoriesDelete)
	t.Run("Lines", testLinesDelete)
	t.Run("LineRevisions", testLineRevisionsDelete)
	t.Run("Pages", testPagesDelete)
	t.Run("PageRevisions", testPageRevisionsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Activities", testActivitiesQueryDeleteAll)
	t.Run("Authors", testAuthorsQueryDeleteAll)
	t.Run("Books", testBooksQueryDeleteAll)
	t.Run("BookAuthors", testBookAuthorsQueryDeleteAll)
	t.Run("BookCategories", testBookCategoriesQueryDeleteAll)
	t.Run("BookInitiaters", testBookInitiatersQueryDeleteAll)
	t.Run("Categories", testCategoriesQueryDeleteAll)
	t.Run("Lines", testLinesQueryDeleteAll)
	t.Run("LineRevisions", testLineRevisionsQueryDeleteAll)
	t.Run("Pages", testPagesQueryDeleteAll)
	t.Run("PageRevisions", testPageRevisionsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Activities", testActivitiesSliceDeleteAll)
	t.Run("Authors", testAuthorsSliceDeleteAll)
	t.Run("Books", testBooksSliceDeleteAll)
	t.Run("BookAuthors", testBookAuthorsSliceDeleteAll)
	t.Run("BookCategories", testBookCategoriesSliceDeleteAll)
	t.Run("BookInitiaters", testBookInitiatersSliceDeleteAll)
	t.Run("Categories", testCategoriesSliceDeleteAll)
	t.Run("Lines", testLinesSliceDeleteAll)
	t.Run("LineRevisions", testLineRevisionsSliceDeleteAll)
	t.Run("Pages", testPagesSliceDeleteAll)
	t.Run("PageRevisions", testPageRevisionsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Activities", testActivitiesExists)
	t.Run("Authors", testAuthorsExists)
	t.Run("Books", testBooksExists)
	t.Run("BookAuthors", testBookAuthorsExists)
	t.Run("BookCategories", testBookCategoriesExists)
	t.Run("BookInitiaters", testBookInitiatersExists)
	t.Run("Categories", testCategoriesExists)
	t.Run("Lines", testLinesExists)
	t.Run("LineRevisions", testLineRevisionsExists)
	t.Run("Pages", testPagesExists)
	t.Run("PageRevisions", testPageRevisionsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Activities", testActivitiesFind)
	t.Run("Authors", testAuthorsFind)
	t.Run("Books", testBooksFind)
	t.Run("BookAuthors", testBookAuthorsFind)
	t.Run("BookCategories", testBookCategoriesFind)
	t.Run("BookInitiaters", testBookInitiatersFind)
	t.Run("Categories", testCategoriesFind)
	t.Run("Lines", testLinesFind)
	t.Run("LineRevisions", testLineRevisionsFind)
	t.Run("Pages", testPagesFind)
	t.Run("PageRevisions", testPageRevisionsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Activities", testActivitiesBind)
	t.Run("Authors", testAuthorsBind)
	t.Run("Books", testBooksBind)
	t.Run("BookAuthors", testBookAuthorsBind)
	t.Run("BookCategories", testBookCategoriesBind)
	t.Run("BookInitiaters", testBookInitiatersBind)
	t.Run("Categories", testCategoriesBind)
	t.Run("Lines", testLinesBind)
	t.Run("LineRevisions", testLineRevisionsBind)
	t.Run("Pages", testPagesBind)
	t.Run("PageRevisions", testPageRevisionsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Activities", testActivitiesOne)
	t.Run("Authors", testAuthorsOne)
	t.Run("Books", testBooksOne)
	t.Run("BookAuthors", testBookAuthorsOne)
	t.Run("BookCategories", testBookCategoriesOne)
	t.Run("BookInitiaters", testBookInitiatersOne)
	t.Run("Categories", testCategoriesOne)
	t.Run("Lines", testLinesOne)
	t.Run("LineRevisions", testLineRevisionsOne)
	t.Run("Pages", testPagesOne)
	t.Run("PageRevisions", testPageRevisionsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Activities", testActivitiesAll)
	t.Run("Authors", testAuthorsAll)
	t.Run("Books", testBooksAll)
	t.Run("BookAuthors", testBookAuthorsAll)
	t.Run("BookCategories", testBookCategoriesAll)
	t.Run("BookInitiaters", testBookInitiatersAll)
	t.Run("Categories", testCategoriesAll)
	t.Run("Lines", testLinesAll)
	t.Run("LineRevisions", testLineRevisionsAll)
	t.Run("Pages", testPagesAll)
	t.Run("PageRevisions", testPageRevisionsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Activities", testActivitiesCount)
	t.Run("Authors", testAuthorsCount)
	t.Run("Books", testBooksCount)
	t.Run("BookAuthors", testBookAuthorsCount)
	t.Run("BookCategories", testBookCategoriesCount)
	t.Run("BookInitiaters", testBookInitiatersCount)
	t.Run("Categories", testCategoriesCount)
	t.Run("Lines", testLinesCount)
	t.Run("LineRevisions", testLineRevisionsCount)
	t.Run("Pages", testPagesCount)
	t.Run("PageRevisions", testPageRevisionsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Activities", testActivitiesHooks)
	t.Run("Authors", testAuthorsHooks)
	t.Run("Books", testBooksHooks)
	t.Run("BookAuthors", testBookAuthorsHooks)
	t.Run("BookCategories", testBookCategoriesHooks)
	t.Run("BookInitiaters", testBookInitiatersHooks)
	t.Run("Categories", testCategoriesHooks)
	t.Run("Lines", testLinesHooks)
	t.Run("LineRevisions", testLineRevisionsHooks)
	t.Run("Pages", testPagesHooks)
	t.Run("PageRevisions", testPageRevisionsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Activities", testActivitiesInsert)
	t.Run("Activities", testActivitiesInsertWhitelist)
	t.Run("Authors", testAuthorsInsert)
	t.Run("Authors", testAuthorsInsertWhitelist)
	t.Run("Books", testBooksInsert)
	t.Run("Books", testBooksInsertWhitelist)
	t.Run("BookAuthors", testBookAuthorsInsert)
	t.Run("BookAuthors", testBookAuthorsInsertWhitelist)
	t.Run("BookCategories", testBookCategoriesInsert)
	t.Run("BookCategories", testBookCategoriesInsertWhitelist)
	t.Run("BookInitiaters", testBookInitiatersInsert)
	t.Run("BookInitiaters", testBookInitiatersInsertWhitelist)
	t.Run("Categories", testCategoriesInsert)
	t.Run("Categories", testCategoriesInsertWhitelist)
	t.Run("Lines", testLinesInsert)
	t.Run("Lines", testLinesInsertWhitelist)
	t.Run("LineRevisions", testLineRevisionsInsert)
	t.Run("LineRevisions", testLineRevisionsInsertWhitelist)
	t.Run("Pages", testPagesInsert)
	t.Run("Pages", testPagesInsertWhitelist)
	t.Run("PageRevisions", testPageRevisionsInsert)
	t.Run("PageRevisions", testPageRevisionsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ActivityToUserUsingUser", testActivityToOneUserUsingUser)
	t.Run("BookAuthorToAuthorUsingAuthor", testBookAuthorToOneAuthorUsingAuthor)
	t.Run("BookAuthorToBookUsingBook", testBookAuthorToOneBookUsingBook)
	t.Run("BookCategoryToBookUsingBook", testBookCategoryToOneBookUsingBook)
	t.Run("BookCategoryToCategoryUsingCategory", testBookCategoryToOneCategoryUsingCategory)
	t.Run("BookInitiaterToBookUsingBook", testBookInitiaterToOneBookUsingBook)
	t.Run("BookInitiaterToUserUsingUser", testBookInitiaterToOneUserUsingUser)
	t.Run("LineToPageUsingPage", testLineToOnePageUsingPage)
	t.Run("LineRevisionToLineUsingLine", testLineRevisionToOneLineUsingLine)
	t.Run("LineRevisionToUserUsingReviewer", testLineRevisionToOneUserUsingReviewer)
	t.Run("PageToBookUsingBook", testPageToOneBookUsingBook)
	t.Run("PageRevisionToPageUsingPage", testPageRevisionToOnePageUsingPage)
	t.Run("PageRevisionToUserUsingReviewer", testPageRevisionToOneUserUsingReviewer)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AuthorToBookAuthors", testAuthorToManyBookAuthors)
	t.Run("BookToBookAuthors", testBookToManyBookAuthors)
	t.Run("BookToBookCategories", testBookToManyBookCategories)
	t.Run("BookToBookInitiaters", testBookToManyBookInitiaters)
	t.Run("BookToPages", testBookToManyPages)
	t.Run("CategoryToBookCategories", testCategoryToManyBookCategories)
	t.Run("LineToLineRevisions", testLineToManyLineRevisions)
	t.Run("PageToLines", testPageToManyLines)
	t.Run("PageToPageRevisions", testPageToManyPageRevisions)
	t.Run("UserToActivities", testUserToManyActivities)
	t.Run("UserToBookInitiaters", testUserToManyBookInitiaters)
	t.Run("UserToReviewerLineRevisions", testUserToManyReviewerLineRevisions)
	t.Run("UserToReviewerPageRevisions", testUserToManyReviewerPageRevisions)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ActivityToUserUsingActivities", testActivityToOneSetOpUserUsingUser)
	t.Run("BookAuthorToAuthorUsingBookAuthors", testBookAuthorToOneSetOpAuthorUsingAuthor)
	t.Run("BookAuthorToBookUsingBookAuthors", testBookAuthorToOneSetOpBookUsingBook)
	t.Run("BookCategoryToBookUsingBookCategories", testBookCategoryToOneSetOpBookUsingBook)
	t.Run("BookCategoryToCategoryUsingBookCategories", testBookCategoryToOneSetOpCategoryUsingCategory)
	t.Run("BookInitiaterToBookUsingBookInitiaters", testBookInitiaterToOneSetOpBookUsingBook)
	t.Run("BookInitiaterToUserUsingBookInitiaters", testBookInitiaterToOneSetOpUserUsingUser)
	t.Run("LineToPageUsingLines", testLineToOneSetOpPageUsingPage)
	t.Run("LineRevisionToLineUsingLineRevisions", testLineRevisionToOneSetOpLineUsingLine)
	t.Run("LineRevisionToUserUsingReviewerLineRevisions", testLineRevisionToOneSetOpUserUsingReviewer)
	t.Run("PageToBookUsingPages", testPageToOneSetOpBookUsingBook)
	t.Run("PageRevisionToPageUsingPageRevisions", testPageRevisionToOneSetOpPageUsingPage)
	t.Run("PageRevisionToUserUsingReviewerPageRevisions", testPageRevisionToOneSetOpUserUsingReviewer)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AuthorToBookAuthors", testAuthorToManyAddOpBookAuthors)
	t.Run("BookToBookAuthors", testBookToManyAddOpBookAuthors)
	t.Run("BookToBookCategories", testBookToManyAddOpBookCategories)
	t.Run("BookToBookInitiaters", testBookToManyAddOpBookInitiaters)
	t.Run("BookToPages", testBookToManyAddOpPages)
	t.Run("CategoryToBookCategories", testCategoryToManyAddOpBookCategories)
	t.Run("LineToLineRevisions", testLineToManyAddOpLineRevisions)
	t.Run("PageToLines", testPageToManyAddOpLines)
	t.Run("PageToPageRevisions", testPageToManyAddOpPageRevisions)
	t.Run("UserToActivities", testUserToManyAddOpActivities)
	t.Run("UserToBookInitiaters", testUserToManyAddOpBookInitiaters)
	t.Run("UserToReviewerLineRevisions", testUserToManyAddOpReviewerLineRevisions)
	t.Run("UserToReviewerPageRevisions", testUserToManyAddOpReviewerPageRevisions)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Activities", testActivitiesReload)
	t.Run("Authors", testAuthorsReload)
	t.Run("Books", testBooksReload)
	t.Run("BookAuthors", testBookAuthorsReload)
	t.Run("BookCategories", testBookCategoriesReload)
	t.Run("BookInitiaters", testBookInitiatersReload)
	t.Run("Categories", testCategoriesReload)
	t.Run("Lines", testLinesReload)
	t.Run("LineRevisions", testLineRevisionsReload)
	t.Run("Pages", testPagesReload)
	t.Run("PageRevisions", testPageRevisionsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Activities", testActivitiesReloadAll)
	t.Run("Authors", testAuthorsReloadAll)
	t.Run("Books", testBooksReloadAll)
	t.Run("BookAuthors", testBookAuthorsReloadAll)
	t.Run("BookCategories", testBookCategoriesReloadAll)
	t.Run("BookInitiaters", testBookInitiatersReloadAll)
	t.Run("Categories", testCategoriesReloadAll)
	t.Run("Lines", testLinesReloadAll)
	t.Run("LineRevisions", testLineRevisionsReloadAll)
	t.Run("Pages", testPagesReloadAll)
	t.Run("PageRevisions", testPageRevisionsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Activities", testActivitiesSelect)
	t.Run("Authors", testAuthorsSelect)
	t.Run("Books", testBooksSelect)
	t.Run("BookAuthors", testBookAuthorsSelect)
	t.Run("BookCategories", testBookCategoriesSelect)
	t.Run("BookInitiaters", testBookInitiatersSelect)
	t.Run("Categories", testCategoriesSelect)
	t.Run("Lines", testLinesSelect)
	t.Run("LineRevisions", testLineRevisionsSelect)
	t.Run("Pages", testPagesSelect)
	t.Run("PageRevisions", testPageRevisionsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Activities", testActivitiesUpdate)
	t.Run("Authors", testAuthorsUpdate)
	t.Run("Books", testBooksUpdate)
	t.Run("BookAuthors", testBookAuthorsUpdate)
	t.Run("BookCategories", testBookCategoriesUpdate)
	t.Run("BookInitiaters", testBookInitiatersUpdate)
	t.Run("Categories", testCategoriesUpdate)
	t.Run("Lines", testLinesUpdate)
	t.Run("LineRevisions", testLineRevisionsUpdate)
	t.Run("Pages", testPagesUpdate)
	t.Run("PageRevisions", testPageRevisionsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Activities", testActivitiesSliceUpdateAll)
	t.Run("Authors", testAuthorsSliceUpdateAll)
	t.Run("Books", testBooksSliceUpdateAll)
	t.Run("BookAuthors", testBookAuthorsSliceUpdateAll)
	t.Run("BookCategories", testBookCategoriesSliceUpdateAll)
	t.Run("BookInitiaters", testBookInitiatersSliceUpdateAll)
	t.Run("Categories", testCategoriesSliceUpdateAll)
	t.Run("Lines", testLinesSliceUpdateAll)
	t.Run("LineRevisions", testLineRevisionsSliceUpdateAll)
	t.Run("Pages", testPagesSliceUpdateAll)
	t.Run("PageRevisions", testPageRevisionsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
