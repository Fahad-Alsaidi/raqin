// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPages(t *testing.T) {
	t.Parallel()

	query := Pages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Pages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PageExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Page exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PageExists to return true, but got false.")
	}
}

func testPagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pageFound, err := FindPage(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if pageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Pages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Pages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pageOne := &Page{}
	pageTwo := &Page{}
	if err = randomize.Struct(seed, pageOne, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}
	if err = randomize.Struct(seed, pageTwo, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pageOne := &Page{}
	pageTwo := &Page{}
	if err = randomize.Struct(seed, pageOne, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}
	if err = randomize.Struct(seed, pageTwo, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func testPagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Page{}
	o := &Page{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Page object: %s", err)
	}

	AddPageHook(boil.BeforeInsertHook, pageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pageBeforeInsertHooks = []PageHook{}

	AddPageHook(boil.AfterInsertHook, pageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pageAfterInsertHooks = []PageHook{}

	AddPageHook(boil.AfterSelectHook, pageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pageAfterSelectHooks = []PageHook{}

	AddPageHook(boil.BeforeUpdateHook, pageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pageBeforeUpdateHooks = []PageHook{}

	AddPageHook(boil.AfterUpdateHook, pageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pageAfterUpdateHooks = []PageHook{}

	AddPageHook(boil.BeforeDeleteHook, pageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pageBeforeDeleteHooks = []PageHook{}

	AddPageHook(boil.AfterDeleteHook, pageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pageAfterDeleteHooks = []PageHook{}

	AddPageHook(boil.BeforeUpsertHook, pageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pageBeforeUpsertHooks = []PageHook{}

	AddPageHook(boil.AfterUpsertHook, pageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pageAfterUpsertHooks = []PageHook{}
}

func testPagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPageToManyLines(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c Line

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, lineDBTypes, false, lineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lineDBTypes, false, lineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PageID = a.ID
	c.PageID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Lines().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PageID == b.PageID {
			bFound = true
		}
		if v.PageID == c.PageID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PageSlice{&a}
	if err = a.L.LoadLines(ctx, tx, false, (*[]*Page)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Lines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Lines = nil
	if err = a.L.LoadLines(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Lines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPageToManyPageRevisions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c PageRevision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pageRevisionDBTypes, false, pageRevisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageRevisionDBTypes, false, pageRevisionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PageID = a.ID
	c.PageID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PageRevisions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PageID == b.PageID {
			bFound = true
		}
		if v.PageID == c.PageID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PageSlice{&a}
	if err = a.L.LoadPageRevisions(ctx, tx, false, (*[]*Page)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageRevisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PageRevisions = nil
	if err = a.L.LoadPageRevisions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageRevisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPageToManyAddOpLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c, d, e Line

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Line{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, lineDBTypes, false, strmangle.SetComplement(linePrimaryKeyColumns, lineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Line{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLines(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PageID {
			t.Error("foreign key was wrong value", a.ID, first.PageID)
		}
		if a.ID != second.PageID {
			t.Error("foreign key was wrong value", a.ID, second.PageID)
		}

		if first.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Lines[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Lines[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Lines().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPageToManyAddOpPageRevisions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c, d, e PageRevision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PageRevision{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pageRevisionDBTypes, false, strmangle.SetComplement(pageRevisionPrimaryKeyColumns, pageRevisionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PageRevision{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPageRevisions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PageID {
			t.Error("foreign key was wrong value", a.ID, first.PageID)
		}
		if a.ID != second.PageID {
			t.Error("foreign key was wrong value", a.ID, second.PageID)
		}

		if first.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Page != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PageRevisions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PageRevisions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PageRevisions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPageToOneBookUsingBook(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Page
	var foreign Book

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BookID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Book().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PageSlice{&local}
	if err = local.L.LoadBook(ctx, tx, false, (*[]*Page)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Book = nil
	if err = local.L.LoadBook(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Book == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPageToOneSetOpBookUsingBook(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Book{&b, &c} {
		err = a.SetBook(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Book != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Pages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BookID != x.ID {
			t.Error("foreign key was wrong value", a.BookID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BookID))
		reflect.Indirect(reflect.ValueOf(&a.BookID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BookID != x.ID {
			t.Error("foreign key was wrong value", a.BookID, x.ID)
		}
	}
}

func testPagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pageDBTypes = map[string]string{`ID`: `int`, `BookID`: `int`, `Path`: `varchar`, `Number`: `int`, `Stage`: `enum('NONE','INIT','REV1','REV2','DONE')`, `PageText`: `text`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_           = bytes.MinRead
)

func testPagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pageAllColumns) == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pageDBTypes, true, pagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pageAllColumns) == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pageDBTypes, true, pagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pageAllColumns, pagePrimaryKeyColumns) {
		fields = pageAllColumns
	} else {
		fields = strmangle.SetComplement(
			pageAllColumns,
			pagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPagesUpsert(t *testing.T) {
	t.Parallel()

	if len(pageAllColumns) == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPageUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Page{}
	if err = randomize.Struct(seed, &o, pageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Page: %s", err)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pageDBTypes, false, pagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Page: %s", err)
	}

	count, err = Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
