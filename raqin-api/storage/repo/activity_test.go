// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testActivities(t *testing.T) {
	t.Parallel()

	query := Activities()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testActivitiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Activities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testActivitiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Activities().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Activities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testActivitiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ActivitySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Activities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testActivitiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ActivityExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Activity exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ActivityExists to return true, but got false.")
	}
}

func testActivitiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	activityFound, err := FindActivity(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if activityFound == nil {
		t.Error("want a record, got nil")
	}
}

func testActivitiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Activities().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testActivitiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Activities().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testActivitiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	activityOne := &Activity{}
	activityTwo := &Activity{}
	if err = randomize.Struct(seed, activityOne, activityDBTypes, false, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}
	if err = randomize.Struct(seed, activityTwo, activityDBTypes, false, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = activityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = activityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Activities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testActivitiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	activityOne := &Activity{}
	activityTwo := &Activity{}
	if err = randomize.Struct(seed, activityOne, activityDBTypes, false, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}
	if err = randomize.Struct(seed, activityTwo, activityDBTypes, false, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = activityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = activityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Activities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func activityBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Activity) error {
	*o = Activity{}
	return nil
}

func activityAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Activity) error {
	*o = Activity{}
	return nil
}

func activityAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Activity) error {
	*o = Activity{}
	return nil
}

func activityBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Activity) error {
	*o = Activity{}
	return nil
}

func activityAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Activity) error {
	*o = Activity{}
	return nil
}

func activityBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Activity) error {
	*o = Activity{}
	return nil
}

func activityAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Activity) error {
	*o = Activity{}
	return nil
}

func activityBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Activity) error {
	*o = Activity{}
	return nil
}

func activityAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Activity) error {
	*o = Activity{}
	return nil
}

func testActivitiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Activity{}
	o := &Activity{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, activityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Activity object: %s", err)
	}

	AddActivityHook(boil.BeforeInsertHook, activityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	activityBeforeInsertHooks = []ActivityHook{}

	AddActivityHook(boil.AfterInsertHook, activityAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	activityAfterInsertHooks = []ActivityHook{}

	AddActivityHook(boil.AfterSelectHook, activityAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	activityAfterSelectHooks = []ActivityHook{}

	AddActivityHook(boil.BeforeUpdateHook, activityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	activityBeforeUpdateHooks = []ActivityHook{}

	AddActivityHook(boil.AfterUpdateHook, activityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	activityAfterUpdateHooks = []ActivityHook{}

	AddActivityHook(boil.BeforeDeleteHook, activityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	activityBeforeDeleteHooks = []ActivityHook{}

	AddActivityHook(boil.AfterDeleteHook, activityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	activityAfterDeleteHooks = []ActivityHook{}

	AddActivityHook(boil.BeforeUpsertHook, activityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	activityBeforeUpsertHooks = []ActivityHook{}

	AddActivityHook(boil.AfterUpsertHook, activityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	activityAfterUpsertHooks = []ActivityHook{}
}

func testActivitiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Activities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testActivitiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(activityColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Activities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testActivityToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Activity
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, activityDBTypes, false, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ActivitySlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Activity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testActivityToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Activity
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, activityDBTypes, false, strmangle.SetComplement(activityPrimaryKeyColumns, activityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Activities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testActivitiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testActivitiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ActivitySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testActivitiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Activities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	activityDBTypes = map[string]string{`ID`: `integer`, `Resource`: `enum.resource('BOOK','LINE','USER','CATEGORY','AUTHOR')`, `Action`: `enum.action('CREATE','UPDATE','DELETE')`, `UserID`: `integer`, `Value`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_               = bytes.MinRead
)

func testActivitiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(activityPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(activityAllColumns) == len(activityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Activities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, activityDBTypes, true, activityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testActivitiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(activityAllColumns) == len(activityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Activity{}
	if err = randomize.Struct(seed, o, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Activities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, activityDBTypes, true, activityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(activityAllColumns, activityPrimaryKeyColumns) {
		fields = activityAllColumns
	} else {
		fields = strmangle.SetComplement(
			activityAllColumns,
			activityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ActivitySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testActivitiesUpsert(t *testing.T) {
	t.Parallel()

	if len(activityAllColumns) == len(activityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Activity{}
	if err = randomize.Struct(seed, &o, activityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Activity: %s", err)
	}

	count, err := Activities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, activityDBTypes, false, activityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Activity: %s", err)
	}

	count, err = Activities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
