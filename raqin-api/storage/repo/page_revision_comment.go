// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PageRevisionComment is an object representing the database table.
type PageRevisionComment struct {
	ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	PageRevisionID int       `boil:"page_revision_id" json:"page_revision_id" toml:"page_revision_id" yaml:"page_revision_id"`
	CommenterID    int       `boil:"commenter_id" json:"commenter_id" toml:"commenter_id" yaml:"commenter_id"`
	Comment        string    `boil:"comment" json:"comment" toml:"comment" yaml:"comment"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *pageRevisionCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pageRevisionCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PageRevisionCommentColumns = struct {
	ID             string
	PageRevisionID string
	CommenterID    string
	Comment        string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	PageRevisionID: "page_revision_id",
	CommenterID:    "commenter_id",
	Comment:        "comment",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

// Generated where

var PageRevisionCommentWhere = struct {
	ID             whereHelperint
	PageRevisionID whereHelperint
	CommenterID    whereHelperint
	Comment        whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpertime_Time
}{
	ID:             whereHelperint{field: "`page_revision_comment`.`id`"},
	PageRevisionID: whereHelperint{field: "`page_revision_comment`.`page_revision_id`"},
	CommenterID:    whereHelperint{field: "`page_revision_comment`.`commenter_id`"},
	Comment:        whereHelperstring{field: "`page_revision_comment`.`comment`"},
	CreatedAt:      whereHelpertime_Time{field: "`page_revision_comment`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`page_revision_comment`.`updated_at`"},
	DeletedAt:      whereHelpertime_Time{field: "`page_revision_comment`.`deleted_at`"},
}

// PageRevisionCommentRels is where relationship names are stored.
var PageRevisionCommentRels = struct {
	PageRevision string
	Commenter    string
}{
	PageRevision: "PageRevision",
	Commenter:    "Commenter",
}

// pageRevisionCommentR is where relationships are stored.
type pageRevisionCommentR struct {
	PageRevision *PageRevision `boil:"PageRevision" json:"PageRevision" toml:"PageRevision" yaml:"PageRevision"`
	Commenter    *User         `boil:"Commenter" json:"Commenter" toml:"Commenter" yaml:"Commenter"`
}

// NewStruct creates a new relationship struct
func (*pageRevisionCommentR) NewStruct() *pageRevisionCommentR {
	return &pageRevisionCommentR{}
}

// pageRevisionCommentL is where Load methods for each relationship are stored.
type pageRevisionCommentL struct{}

var (
	pageRevisionCommentAllColumns            = []string{"id", "page_revision_id", "commenter_id", "comment", "created_at", "updated_at", "deleted_at"}
	pageRevisionCommentColumnsWithoutDefault = []string{"page_revision_id", "commenter_id", "comment"}
	pageRevisionCommentColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	pageRevisionCommentPrimaryKeyColumns     = []string{"id"}
)

type (
	// PageRevisionCommentSlice is an alias for a slice of pointers to PageRevisionComment.
	// This should generally be used opposed to []PageRevisionComment.
	PageRevisionCommentSlice []*PageRevisionComment
	// PageRevisionCommentHook is the signature for custom PageRevisionComment hook methods
	PageRevisionCommentHook func(context.Context, boil.ContextExecutor, *PageRevisionComment) error

	pageRevisionCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pageRevisionCommentType                 = reflect.TypeOf(&PageRevisionComment{})
	pageRevisionCommentMapping              = queries.MakeStructMapping(pageRevisionCommentType)
	pageRevisionCommentPrimaryKeyMapping, _ = queries.BindMapping(pageRevisionCommentType, pageRevisionCommentMapping, pageRevisionCommentPrimaryKeyColumns)
	pageRevisionCommentInsertCacheMut       sync.RWMutex
	pageRevisionCommentInsertCache          = make(map[string]insertCache)
	pageRevisionCommentUpdateCacheMut       sync.RWMutex
	pageRevisionCommentUpdateCache          = make(map[string]updateCache)
	pageRevisionCommentUpsertCacheMut       sync.RWMutex
	pageRevisionCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pageRevisionCommentBeforeInsertHooks []PageRevisionCommentHook
var pageRevisionCommentBeforeUpdateHooks []PageRevisionCommentHook
var pageRevisionCommentBeforeDeleteHooks []PageRevisionCommentHook
var pageRevisionCommentBeforeUpsertHooks []PageRevisionCommentHook

var pageRevisionCommentAfterInsertHooks []PageRevisionCommentHook
var pageRevisionCommentAfterSelectHooks []PageRevisionCommentHook
var pageRevisionCommentAfterUpdateHooks []PageRevisionCommentHook
var pageRevisionCommentAfterDeleteHooks []PageRevisionCommentHook
var pageRevisionCommentAfterUpsertHooks []PageRevisionCommentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PageRevisionComment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionCommentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PageRevisionComment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionCommentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PageRevisionComment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionCommentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PageRevisionComment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionCommentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PageRevisionComment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionCommentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PageRevisionComment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionCommentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PageRevisionComment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionCommentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PageRevisionComment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionCommentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PageRevisionComment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionCommentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPageRevisionCommentHook registers your hook function for all future operations.
func AddPageRevisionCommentHook(hookPoint boil.HookPoint, pageRevisionCommentHook PageRevisionCommentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pageRevisionCommentBeforeInsertHooks = append(pageRevisionCommentBeforeInsertHooks, pageRevisionCommentHook)
	case boil.BeforeUpdateHook:
		pageRevisionCommentBeforeUpdateHooks = append(pageRevisionCommentBeforeUpdateHooks, pageRevisionCommentHook)
	case boil.BeforeDeleteHook:
		pageRevisionCommentBeforeDeleteHooks = append(pageRevisionCommentBeforeDeleteHooks, pageRevisionCommentHook)
	case boil.BeforeUpsertHook:
		pageRevisionCommentBeforeUpsertHooks = append(pageRevisionCommentBeforeUpsertHooks, pageRevisionCommentHook)
	case boil.AfterInsertHook:
		pageRevisionCommentAfterInsertHooks = append(pageRevisionCommentAfterInsertHooks, pageRevisionCommentHook)
	case boil.AfterSelectHook:
		pageRevisionCommentAfterSelectHooks = append(pageRevisionCommentAfterSelectHooks, pageRevisionCommentHook)
	case boil.AfterUpdateHook:
		pageRevisionCommentAfterUpdateHooks = append(pageRevisionCommentAfterUpdateHooks, pageRevisionCommentHook)
	case boil.AfterDeleteHook:
		pageRevisionCommentAfterDeleteHooks = append(pageRevisionCommentAfterDeleteHooks, pageRevisionCommentHook)
	case boil.AfterUpsertHook:
		pageRevisionCommentAfterUpsertHooks = append(pageRevisionCommentAfterUpsertHooks, pageRevisionCommentHook)
	}
}

// One returns a single pageRevisionComment record from the query.
func (q pageRevisionCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PageRevisionComment, error) {
	o := &PageRevisionComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repo: failed to execute a one query for page_revision_comment")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PageRevisionComment records from the query.
func (q pageRevisionCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (PageRevisionCommentSlice, error) {
	var o []*PageRevisionComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repo: failed to assign all query results to PageRevisionComment slice")
	}

	if len(pageRevisionCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PageRevisionComment records in the query.
func (q pageRevisionCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to count page_revision_comment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pageRevisionCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repo: failed to check if page_revision_comment exists")
	}

	return count > 0, nil
}

// PageRevision pointed to by the foreign key.
func (o *PageRevisionComment) PageRevision(mods ...qm.QueryMod) pageRevisionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PageRevisionID),
	}

	queryMods = append(queryMods, mods...)

	query := PageRevisions(queryMods...)
	queries.SetFrom(query.Query, "`page_revision`")

	return query
}

// Commenter pointed to by the foreign key.
func (o *PageRevisionComment) Commenter(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CommenterID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// LoadPageRevision allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pageRevisionCommentL) LoadPageRevision(ctx context.Context, e boil.ContextExecutor, singular bool, maybePageRevisionComment interface{}, mods queries.Applicator) error {
	var slice []*PageRevisionComment
	var object *PageRevisionComment

	if singular {
		object = maybePageRevisionComment.(*PageRevisionComment)
	} else {
		slice = *maybePageRevisionComment.(*[]*PageRevisionComment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageRevisionCommentR{}
		}
		args = append(args, object.PageRevisionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageRevisionCommentR{}
			}

			for _, a := range args {
				if a == obj.PageRevisionID {
					continue Outer
				}
			}

			args = append(args, obj.PageRevisionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`page_revision`),
		qm.WhereIn(`page_revision.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PageRevision")
	}

	var resultSlice []*PageRevision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PageRevision")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for page_revision")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for page_revision")
	}

	if len(pageRevisionCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PageRevision = foreign
		if foreign.R == nil {
			foreign.R = &pageRevisionR{}
		}
		foreign.R.PageRevisionComments = append(foreign.R.PageRevisionComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PageRevisionID == foreign.ID {
				local.R.PageRevision = foreign
				if foreign.R == nil {
					foreign.R = &pageRevisionR{}
				}
				foreign.R.PageRevisionComments = append(foreign.R.PageRevisionComments, local)
				break
			}
		}
	}

	return nil
}

// LoadCommenter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pageRevisionCommentL) LoadCommenter(ctx context.Context, e boil.ContextExecutor, singular bool, maybePageRevisionComment interface{}, mods queries.Applicator) error {
	var slice []*PageRevisionComment
	var object *PageRevisionComment

	if singular {
		object = maybePageRevisionComment.(*PageRevisionComment)
	} else {
		slice = *maybePageRevisionComment.(*[]*PageRevisionComment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageRevisionCommentR{}
		}
		args = append(args, object.CommenterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageRevisionCommentR{}
			}

			for _, a := range args {
				if a == obj.CommenterID {
					continue Outer
				}
			}

			args = append(args, obj.CommenterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(pageRevisionCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Commenter = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CommenterPageRevisionComments = append(foreign.R.CommenterPageRevisionComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommenterID == foreign.ID {
				local.R.Commenter = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CommenterPageRevisionComments = append(foreign.R.CommenterPageRevisionComments, local)
				break
			}
		}
	}

	return nil
}

// SetPageRevision of the pageRevisionComment to the related item.
// Sets o.R.PageRevision to related.
// Adds o to related.R.PageRevisionComments.
func (o *PageRevisionComment) SetPageRevision(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PageRevision) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `page_revision_comment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"page_revision_id"}),
		strmangle.WhereClause("`", "`", 0, pageRevisionCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PageRevisionID = related.ID
	if o.R == nil {
		o.R = &pageRevisionCommentR{
			PageRevision: related,
		}
	} else {
		o.R.PageRevision = related
	}

	if related.R == nil {
		related.R = &pageRevisionR{
			PageRevisionComments: PageRevisionCommentSlice{o},
		}
	} else {
		related.R.PageRevisionComments = append(related.R.PageRevisionComments, o)
	}

	return nil
}

// SetCommenter of the pageRevisionComment to the related item.
// Sets o.R.Commenter to related.
// Adds o to related.R.CommenterPageRevisionComments.
func (o *PageRevisionComment) SetCommenter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `page_revision_comment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"commenter_id"}),
		strmangle.WhereClause("`", "`", 0, pageRevisionCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommenterID = related.ID
	if o.R == nil {
		o.R = &pageRevisionCommentR{
			Commenter: related,
		}
	} else {
		o.R.Commenter = related
	}

	if related.R == nil {
		related.R = &userR{
			CommenterPageRevisionComments: PageRevisionCommentSlice{o},
		}
	} else {
		related.R.CommenterPageRevisionComments = append(related.R.CommenterPageRevisionComments, o)
	}

	return nil
}

// PageRevisionComments retrieves all the records using an executor.
func PageRevisionComments(mods ...qm.QueryMod) pageRevisionCommentQuery {
	mods = append(mods, qm.From("`page_revision_comment`"))
	return pageRevisionCommentQuery{NewQuery(mods...)}
}

// FindPageRevisionComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPageRevisionComment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PageRevisionComment, error) {
	pageRevisionCommentObj := &PageRevisionComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `page_revision_comment` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pageRevisionCommentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repo: unable to select from page_revision_comment")
	}

	return pageRevisionCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PageRevisionComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repo: no page_revision_comment provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageRevisionCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pageRevisionCommentInsertCacheMut.RLock()
	cache, cached := pageRevisionCommentInsertCache[key]
	pageRevisionCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pageRevisionCommentAllColumns,
			pageRevisionCommentColumnsWithDefault,
			pageRevisionCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pageRevisionCommentType, pageRevisionCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pageRevisionCommentType, pageRevisionCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `page_revision_comment` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `page_revision_comment` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `page_revision_comment` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, pageRevisionCommentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "repo: unable to insert into page_revision_comment")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == pageRevisionCommentMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "repo: unable to populate default values for page_revision_comment")
	}

CacheNoHooks:
	if !cached {
		pageRevisionCommentInsertCacheMut.Lock()
		pageRevisionCommentInsertCache[key] = cache
		pageRevisionCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PageRevisionComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PageRevisionComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pageRevisionCommentUpdateCacheMut.RLock()
	cache, cached := pageRevisionCommentUpdateCache[key]
	pageRevisionCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pageRevisionCommentAllColumns,
			pageRevisionCommentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repo: unable to update page_revision_comment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `page_revision_comment` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, pageRevisionCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pageRevisionCommentType, pageRevisionCommentMapping, append(wl, pageRevisionCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update page_revision_comment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by update for page_revision_comment")
	}

	if !cached {
		pageRevisionCommentUpdateCacheMut.Lock()
		pageRevisionCommentUpdateCache[key] = cache
		pageRevisionCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pageRevisionCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update all for page_revision_comment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to retrieve rows affected for page_revision_comment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PageRevisionCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repo: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageRevisionCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `page_revision_comment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pageRevisionCommentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update all in pageRevisionComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to retrieve rows affected all in update all pageRevisionComment")
	}
	return rowsAff, nil
}

var mySQLPageRevisionCommentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PageRevisionComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repo: no page_revision_comment provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageRevisionCommentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPageRevisionCommentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pageRevisionCommentUpsertCacheMut.RLock()
	cache, cached := pageRevisionCommentUpsertCache[key]
	pageRevisionCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pageRevisionCommentAllColumns,
			pageRevisionCommentColumnsWithDefault,
			pageRevisionCommentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pageRevisionCommentAllColumns,
			pageRevisionCommentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("repo: unable to upsert page_revision_comment, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`page_revision_comment`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `page_revision_comment` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(pageRevisionCommentType, pageRevisionCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pageRevisionCommentType, pageRevisionCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "repo: unable to upsert for page_revision_comment")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == pageRevisionCommentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(pageRevisionCommentType, pageRevisionCommentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "repo: unable to retrieve unique values for page_revision_comment")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "repo: unable to populate default values for page_revision_comment")
	}

CacheNoHooks:
	if !cached {
		pageRevisionCommentUpsertCacheMut.Lock()
		pageRevisionCommentUpsertCache[key] = cache
		pageRevisionCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PageRevisionComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PageRevisionComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repo: no PageRevisionComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pageRevisionCommentPrimaryKeyMapping)
	sql := "DELETE FROM `page_revision_comment` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete from page_revision_comment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by delete for page_revision_comment")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pageRevisionCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repo: no pageRevisionCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete all from page_revision_comment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by deleteall for page_revision_comment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PageRevisionCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pageRevisionCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageRevisionCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `page_revision_comment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pageRevisionCommentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete all from pageRevisionComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by deleteall for page_revision_comment")
	}

	if len(pageRevisionCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PageRevisionComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPageRevisionComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PageRevisionCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PageRevisionCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageRevisionCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `page_revision_comment`.* FROM `page_revision_comment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pageRevisionCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repo: unable to reload all in PageRevisionCommentSlice")
	}

	*o = slice

	return nil
}

// PageRevisionCommentExists checks if the PageRevisionComment row exists.
func PageRevisionCommentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `page_revision_comment` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repo: unable to check if page_revision_comment exists")
	}

	return exists, nil
}
