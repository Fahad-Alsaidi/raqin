// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PageRevisionReaction is an object representing the database table.
type PageRevisionReaction struct {
	ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	PageRevisionID int       `boil:"page_revision_id" json:"page_revision_id" toml:"page_revision_id" yaml:"page_revision_id"`
	ReactorID      int       `boil:"reactor_id" json:"reactor_id" toml:"reactor_id" yaml:"reactor_id"`
	Reaction       string    `boil:"reaction" json:"reaction" toml:"reaction" yaml:"reaction"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *pageRevisionReactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pageRevisionReactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PageRevisionReactionColumns = struct {
	ID             string
	PageRevisionID string
	ReactorID      string
	Reaction       string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	PageRevisionID: "page_revision_id",
	ReactorID:      "reactor_id",
	Reaction:       "reaction",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

// Generated where

var PageRevisionReactionWhere = struct {
	ID             whereHelperint
	PageRevisionID whereHelperint
	ReactorID      whereHelperint
	Reaction       whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpertime_Time
}{
	ID:             whereHelperint{field: "`page_revision_reaction`.`id`"},
	PageRevisionID: whereHelperint{field: "`page_revision_reaction`.`page_revision_id`"},
	ReactorID:      whereHelperint{field: "`page_revision_reaction`.`reactor_id`"},
	Reaction:       whereHelperstring{field: "`page_revision_reaction`.`reaction`"},
	CreatedAt:      whereHelpertime_Time{field: "`page_revision_reaction`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`page_revision_reaction`.`updated_at`"},
	DeletedAt:      whereHelpertime_Time{field: "`page_revision_reaction`.`deleted_at`"},
}

// PageRevisionReactionRels is where relationship names are stored.
var PageRevisionReactionRels = struct {
	PageRevision string
	Reactor      string
}{
	PageRevision: "PageRevision",
	Reactor:      "Reactor",
}

// pageRevisionReactionR is where relationships are stored.
type pageRevisionReactionR struct {
	PageRevision *PageRevision `boil:"PageRevision" json:"PageRevision" toml:"PageRevision" yaml:"PageRevision"`
	Reactor      *User         `boil:"Reactor" json:"Reactor" toml:"Reactor" yaml:"Reactor"`
}

// NewStruct creates a new relationship struct
func (*pageRevisionReactionR) NewStruct() *pageRevisionReactionR {
	return &pageRevisionReactionR{}
}

// pageRevisionReactionL is where Load methods for each relationship are stored.
type pageRevisionReactionL struct{}

var (
	pageRevisionReactionAllColumns            = []string{"id", "page_revision_id", "reactor_id", "reaction", "created_at", "updated_at", "deleted_at"}
	pageRevisionReactionColumnsWithoutDefault = []string{"page_revision_id", "reactor_id"}
	pageRevisionReactionColumnsWithDefault    = []string{"id", "reaction", "created_at", "updated_at", "deleted_at"}
	pageRevisionReactionPrimaryKeyColumns     = []string{"id"}
)

type (
	// PageRevisionReactionSlice is an alias for a slice of pointers to PageRevisionReaction.
	// This should generally be used opposed to []PageRevisionReaction.
	PageRevisionReactionSlice []*PageRevisionReaction
	// PageRevisionReactionHook is the signature for custom PageRevisionReaction hook methods
	PageRevisionReactionHook func(context.Context, boil.ContextExecutor, *PageRevisionReaction) error

	pageRevisionReactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pageRevisionReactionType                 = reflect.TypeOf(&PageRevisionReaction{})
	pageRevisionReactionMapping              = queries.MakeStructMapping(pageRevisionReactionType)
	pageRevisionReactionPrimaryKeyMapping, _ = queries.BindMapping(pageRevisionReactionType, pageRevisionReactionMapping, pageRevisionReactionPrimaryKeyColumns)
	pageRevisionReactionInsertCacheMut       sync.RWMutex
	pageRevisionReactionInsertCache          = make(map[string]insertCache)
	pageRevisionReactionUpdateCacheMut       sync.RWMutex
	pageRevisionReactionUpdateCache          = make(map[string]updateCache)
	pageRevisionReactionUpsertCacheMut       sync.RWMutex
	pageRevisionReactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pageRevisionReactionBeforeInsertHooks []PageRevisionReactionHook
var pageRevisionReactionBeforeUpdateHooks []PageRevisionReactionHook
var pageRevisionReactionBeforeDeleteHooks []PageRevisionReactionHook
var pageRevisionReactionBeforeUpsertHooks []PageRevisionReactionHook

var pageRevisionReactionAfterInsertHooks []PageRevisionReactionHook
var pageRevisionReactionAfterSelectHooks []PageRevisionReactionHook
var pageRevisionReactionAfterUpdateHooks []PageRevisionReactionHook
var pageRevisionReactionAfterDeleteHooks []PageRevisionReactionHook
var pageRevisionReactionAfterUpsertHooks []PageRevisionReactionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PageRevisionReaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionReactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PageRevisionReaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionReactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PageRevisionReaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionReactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PageRevisionReaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionReactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PageRevisionReaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionReactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PageRevisionReaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionReactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PageRevisionReaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionReactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PageRevisionReaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionReactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PageRevisionReaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageRevisionReactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPageRevisionReactionHook registers your hook function for all future operations.
func AddPageRevisionReactionHook(hookPoint boil.HookPoint, pageRevisionReactionHook PageRevisionReactionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pageRevisionReactionBeforeInsertHooks = append(pageRevisionReactionBeforeInsertHooks, pageRevisionReactionHook)
	case boil.BeforeUpdateHook:
		pageRevisionReactionBeforeUpdateHooks = append(pageRevisionReactionBeforeUpdateHooks, pageRevisionReactionHook)
	case boil.BeforeDeleteHook:
		pageRevisionReactionBeforeDeleteHooks = append(pageRevisionReactionBeforeDeleteHooks, pageRevisionReactionHook)
	case boil.BeforeUpsertHook:
		pageRevisionReactionBeforeUpsertHooks = append(pageRevisionReactionBeforeUpsertHooks, pageRevisionReactionHook)
	case boil.AfterInsertHook:
		pageRevisionReactionAfterInsertHooks = append(pageRevisionReactionAfterInsertHooks, pageRevisionReactionHook)
	case boil.AfterSelectHook:
		pageRevisionReactionAfterSelectHooks = append(pageRevisionReactionAfterSelectHooks, pageRevisionReactionHook)
	case boil.AfterUpdateHook:
		pageRevisionReactionAfterUpdateHooks = append(pageRevisionReactionAfterUpdateHooks, pageRevisionReactionHook)
	case boil.AfterDeleteHook:
		pageRevisionReactionAfterDeleteHooks = append(pageRevisionReactionAfterDeleteHooks, pageRevisionReactionHook)
	case boil.AfterUpsertHook:
		pageRevisionReactionAfterUpsertHooks = append(pageRevisionReactionAfterUpsertHooks, pageRevisionReactionHook)
	}
}

// One returns a single pageRevisionReaction record from the query.
func (q pageRevisionReactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PageRevisionReaction, error) {
	o := &PageRevisionReaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repo: failed to execute a one query for page_revision_reaction")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PageRevisionReaction records from the query.
func (q pageRevisionReactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PageRevisionReactionSlice, error) {
	var o []*PageRevisionReaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repo: failed to assign all query results to PageRevisionReaction slice")
	}

	if len(pageRevisionReactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PageRevisionReaction records in the query.
func (q pageRevisionReactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to count page_revision_reaction rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pageRevisionReactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repo: failed to check if page_revision_reaction exists")
	}

	return count > 0, nil
}

// PageRevision pointed to by the foreign key.
func (o *PageRevisionReaction) PageRevision(mods ...qm.QueryMod) pageRevisionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PageRevisionID),
	}

	queryMods = append(queryMods, mods...)

	query := PageRevisions(queryMods...)
	queries.SetFrom(query.Query, "`page_revision`")

	return query
}

// Reactor pointed to by the foreign key.
func (o *PageRevisionReaction) Reactor(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ReactorID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// LoadPageRevision allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pageRevisionReactionL) LoadPageRevision(ctx context.Context, e boil.ContextExecutor, singular bool, maybePageRevisionReaction interface{}, mods queries.Applicator) error {
	var slice []*PageRevisionReaction
	var object *PageRevisionReaction

	if singular {
		object = maybePageRevisionReaction.(*PageRevisionReaction)
	} else {
		slice = *maybePageRevisionReaction.(*[]*PageRevisionReaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageRevisionReactionR{}
		}
		args = append(args, object.PageRevisionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageRevisionReactionR{}
			}

			for _, a := range args {
				if a == obj.PageRevisionID {
					continue Outer
				}
			}

			args = append(args, obj.PageRevisionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`page_revision`),
		qm.WhereIn(`page_revision.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PageRevision")
	}

	var resultSlice []*PageRevision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PageRevision")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for page_revision")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for page_revision")
	}

	if len(pageRevisionReactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PageRevision = foreign
		if foreign.R == nil {
			foreign.R = &pageRevisionR{}
		}
		foreign.R.PageRevisionReactions = append(foreign.R.PageRevisionReactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PageRevisionID == foreign.ID {
				local.R.PageRevision = foreign
				if foreign.R == nil {
					foreign.R = &pageRevisionR{}
				}
				foreign.R.PageRevisionReactions = append(foreign.R.PageRevisionReactions, local)
				break
			}
		}
	}

	return nil
}

// LoadReactor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pageRevisionReactionL) LoadReactor(ctx context.Context, e boil.ContextExecutor, singular bool, maybePageRevisionReaction interface{}, mods queries.Applicator) error {
	var slice []*PageRevisionReaction
	var object *PageRevisionReaction

	if singular {
		object = maybePageRevisionReaction.(*PageRevisionReaction)
	} else {
		slice = *maybePageRevisionReaction.(*[]*PageRevisionReaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageRevisionReactionR{}
		}
		args = append(args, object.ReactorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageRevisionReactionR{}
			}

			for _, a := range args {
				if a == obj.ReactorID {
					continue Outer
				}
			}

			args = append(args, obj.ReactorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(pageRevisionReactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reactor = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ReactorPageRevisionReactions = append(foreign.R.ReactorPageRevisionReactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReactorID == foreign.ID {
				local.R.Reactor = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ReactorPageRevisionReactions = append(foreign.R.ReactorPageRevisionReactions, local)
				break
			}
		}
	}

	return nil
}

// SetPageRevision of the pageRevisionReaction to the related item.
// Sets o.R.PageRevision to related.
// Adds o to related.R.PageRevisionReactions.
func (o *PageRevisionReaction) SetPageRevision(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PageRevision) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `page_revision_reaction` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"page_revision_id"}),
		strmangle.WhereClause("`", "`", 0, pageRevisionReactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PageRevisionID = related.ID
	if o.R == nil {
		o.R = &pageRevisionReactionR{
			PageRevision: related,
		}
	} else {
		o.R.PageRevision = related
	}

	if related.R == nil {
		related.R = &pageRevisionR{
			PageRevisionReactions: PageRevisionReactionSlice{o},
		}
	} else {
		related.R.PageRevisionReactions = append(related.R.PageRevisionReactions, o)
	}

	return nil
}

// SetReactor of the pageRevisionReaction to the related item.
// Sets o.R.Reactor to related.
// Adds o to related.R.ReactorPageRevisionReactions.
func (o *PageRevisionReaction) SetReactor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `page_revision_reaction` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reactor_id"}),
		strmangle.WhereClause("`", "`", 0, pageRevisionReactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReactorID = related.ID
	if o.R == nil {
		o.R = &pageRevisionReactionR{
			Reactor: related,
		}
	} else {
		o.R.Reactor = related
	}

	if related.R == nil {
		related.R = &userR{
			ReactorPageRevisionReactions: PageRevisionReactionSlice{o},
		}
	} else {
		related.R.ReactorPageRevisionReactions = append(related.R.ReactorPageRevisionReactions, o)
	}

	return nil
}

// PageRevisionReactions retrieves all the records using an executor.
func PageRevisionReactions(mods ...qm.QueryMod) pageRevisionReactionQuery {
	mods = append(mods, qm.From("`page_revision_reaction`"))
	return pageRevisionReactionQuery{NewQuery(mods...)}
}

// FindPageRevisionReaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPageRevisionReaction(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PageRevisionReaction, error) {
	pageRevisionReactionObj := &PageRevisionReaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `page_revision_reaction` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pageRevisionReactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repo: unable to select from page_revision_reaction")
	}

	return pageRevisionReactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PageRevisionReaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repo: no page_revision_reaction provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageRevisionReactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pageRevisionReactionInsertCacheMut.RLock()
	cache, cached := pageRevisionReactionInsertCache[key]
	pageRevisionReactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pageRevisionReactionAllColumns,
			pageRevisionReactionColumnsWithDefault,
			pageRevisionReactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pageRevisionReactionType, pageRevisionReactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pageRevisionReactionType, pageRevisionReactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `page_revision_reaction` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `page_revision_reaction` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `page_revision_reaction` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, pageRevisionReactionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "repo: unable to insert into page_revision_reaction")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == pageRevisionReactionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "repo: unable to populate default values for page_revision_reaction")
	}

CacheNoHooks:
	if !cached {
		pageRevisionReactionInsertCacheMut.Lock()
		pageRevisionReactionInsertCache[key] = cache
		pageRevisionReactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PageRevisionReaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PageRevisionReaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pageRevisionReactionUpdateCacheMut.RLock()
	cache, cached := pageRevisionReactionUpdateCache[key]
	pageRevisionReactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pageRevisionReactionAllColumns,
			pageRevisionReactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repo: unable to update page_revision_reaction, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `page_revision_reaction` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, pageRevisionReactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pageRevisionReactionType, pageRevisionReactionMapping, append(wl, pageRevisionReactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update page_revision_reaction row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by update for page_revision_reaction")
	}

	if !cached {
		pageRevisionReactionUpdateCacheMut.Lock()
		pageRevisionReactionUpdateCache[key] = cache
		pageRevisionReactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pageRevisionReactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update all for page_revision_reaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to retrieve rows affected for page_revision_reaction")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PageRevisionReactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repo: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageRevisionReactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `page_revision_reaction` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pageRevisionReactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update all in pageRevisionReaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to retrieve rows affected all in update all pageRevisionReaction")
	}
	return rowsAff, nil
}

var mySQLPageRevisionReactionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PageRevisionReaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repo: no page_revision_reaction provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageRevisionReactionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPageRevisionReactionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pageRevisionReactionUpsertCacheMut.RLock()
	cache, cached := pageRevisionReactionUpsertCache[key]
	pageRevisionReactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pageRevisionReactionAllColumns,
			pageRevisionReactionColumnsWithDefault,
			pageRevisionReactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pageRevisionReactionAllColumns,
			pageRevisionReactionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("repo: unable to upsert page_revision_reaction, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`page_revision_reaction`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `page_revision_reaction` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(pageRevisionReactionType, pageRevisionReactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pageRevisionReactionType, pageRevisionReactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "repo: unable to upsert for page_revision_reaction")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == pageRevisionReactionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(pageRevisionReactionType, pageRevisionReactionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "repo: unable to retrieve unique values for page_revision_reaction")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "repo: unable to populate default values for page_revision_reaction")
	}

CacheNoHooks:
	if !cached {
		pageRevisionReactionUpsertCacheMut.Lock()
		pageRevisionReactionUpsertCache[key] = cache
		pageRevisionReactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PageRevisionReaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PageRevisionReaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repo: no PageRevisionReaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pageRevisionReactionPrimaryKeyMapping)
	sql := "DELETE FROM `page_revision_reaction` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete from page_revision_reaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by delete for page_revision_reaction")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pageRevisionReactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repo: no pageRevisionReactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete all from page_revision_reaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by deleteall for page_revision_reaction")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PageRevisionReactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pageRevisionReactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageRevisionReactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `page_revision_reaction` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pageRevisionReactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete all from pageRevisionReaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by deleteall for page_revision_reaction")
	}

	if len(pageRevisionReactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PageRevisionReaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPageRevisionReaction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PageRevisionReactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PageRevisionReactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageRevisionReactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `page_revision_reaction`.* FROM `page_revision_reaction` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pageRevisionReactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repo: unable to reload all in PageRevisionReactionSlice")
	}

	*o = slice

	return nil
}

// PageRevisionReactionExists checks if the PageRevisionReaction row exists.
func PageRevisionReactionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `page_revision_reaction` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repo: unable to check if page_revision_reaction exists")
	}

	return exists, nil
}
