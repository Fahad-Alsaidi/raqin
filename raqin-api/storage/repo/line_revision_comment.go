// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repo

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LineRevisionComment is an object representing the database table.
type LineRevisionComment struct {
	ID             int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	LineRevisionID int       `boil:"line_revision_id" json:"line_revision_id" toml:"line_revision_id" yaml:"line_revision_id"`
	CommenterID    int       `boil:"commenter_id" json:"commenter_id" toml:"commenter_id" yaml:"commenter_id"`
	Comment        string    `boil:"comment" json:"comment" toml:"comment" yaml:"comment"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *lineRevisionCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lineRevisionCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LineRevisionCommentColumns = struct {
	ID             string
	LineRevisionID string
	CommenterID    string
	Comment        string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	LineRevisionID: "line_revision_id",
	CommenterID:    "commenter_id",
	Comment:        "comment",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

// Generated where

var LineRevisionCommentWhere = struct {
	ID             whereHelperint
	LineRevisionID whereHelperint
	CommenterID    whereHelperint
	Comment        whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpertime_Time
}{
	ID:             whereHelperint{field: "`line_revision_comment`.`id`"},
	LineRevisionID: whereHelperint{field: "`line_revision_comment`.`line_revision_id`"},
	CommenterID:    whereHelperint{field: "`line_revision_comment`.`commenter_id`"},
	Comment:        whereHelperstring{field: "`line_revision_comment`.`comment`"},
	CreatedAt:      whereHelpertime_Time{field: "`line_revision_comment`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`line_revision_comment`.`updated_at`"},
	DeletedAt:      whereHelpertime_Time{field: "`line_revision_comment`.`deleted_at`"},
}

// LineRevisionCommentRels is where relationship names are stored.
var LineRevisionCommentRels = struct {
	LineRevision string
	Commenter    string
}{
	LineRevision: "LineRevision",
	Commenter:    "Commenter",
}

// lineRevisionCommentR is where relationships are stored.
type lineRevisionCommentR struct {
	LineRevision *LineRevision `boil:"LineRevision" json:"LineRevision" toml:"LineRevision" yaml:"LineRevision"`
	Commenter    *User         `boil:"Commenter" json:"Commenter" toml:"Commenter" yaml:"Commenter"`
}

// NewStruct creates a new relationship struct
func (*lineRevisionCommentR) NewStruct() *lineRevisionCommentR {
	return &lineRevisionCommentR{}
}

// lineRevisionCommentL is where Load methods for each relationship are stored.
type lineRevisionCommentL struct{}

var (
	lineRevisionCommentAllColumns            = []string{"id", "line_revision_id", "commenter_id", "comment", "created_at", "updated_at", "deleted_at"}
	lineRevisionCommentColumnsWithoutDefault = []string{"line_revision_id", "commenter_id", "comment"}
	lineRevisionCommentColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	lineRevisionCommentPrimaryKeyColumns     = []string{"id"}
)

type (
	// LineRevisionCommentSlice is an alias for a slice of pointers to LineRevisionComment.
	// This should generally be used opposed to []LineRevisionComment.
	LineRevisionCommentSlice []*LineRevisionComment
	// LineRevisionCommentHook is the signature for custom LineRevisionComment hook methods
	LineRevisionCommentHook func(context.Context, boil.ContextExecutor, *LineRevisionComment) error

	lineRevisionCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lineRevisionCommentType                 = reflect.TypeOf(&LineRevisionComment{})
	lineRevisionCommentMapping              = queries.MakeStructMapping(lineRevisionCommentType)
	lineRevisionCommentPrimaryKeyMapping, _ = queries.BindMapping(lineRevisionCommentType, lineRevisionCommentMapping, lineRevisionCommentPrimaryKeyColumns)
	lineRevisionCommentInsertCacheMut       sync.RWMutex
	lineRevisionCommentInsertCache          = make(map[string]insertCache)
	lineRevisionCommentUpdateCacheMut       sync.RWMutex
	lineRevisionCommentUpdateCache          = make(map[string]updateCache)
	lineRevisionCommentUpsertCacheMut       sync.RWMutex
	lineRevisionCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lineRevisionCommentBeforeInsertHooks []LineRevisionCommentHook
var lineRevisionCommentBeforeUpdateHooks []LineRevisionCommentHook
var lineRevisionCommentBeforeDeleteHooks []LineRevisionCommentHook
var lineRevisionCommentBeforeUpsertHooks []LineRevisionCommentHook

var lineRevisionCommentAfterInsertHooks []LineRevisionCommentHook
var lineRevisionCommentAfterSelectHooks []LineRevisionCommentHook
var lineRevisionCommentAfterUpdateHooks []LineRevisionCommentHook
var lineRevisionCommentAfterDeleteHooks []LineRevisionCommentHook
var lineRevisionCommentAfterUpsertHooks []LineRevisionCommentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LineRevisionComment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineRevisionCommentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LineRevisionComment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineRevisionCommentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LineRevisionComment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineRevisionCommentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LineRevisionComment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineRevisionCommentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LineRevisionComment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineRevisionCommentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LineRevisionComment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineRevisionCommentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LineRevisionComment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineRevisionCommentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LineRevisionComment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineRevisionCommentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LineRevisionComment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lineRevisionCommentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLineRevisionCommentHook registers your hook function for all future operations.
func AddLineRevisionCommentHook(hookPoint boil.HookPoint, lineRevisionCommentHook LineRevisionCommentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		lineRevisionCommentBeforeInsertHooks = append(lineRevisionCommentBeforeInsertHooks, lineRevisionCommentHook)
	case boil.BeforeUpdateHook:
		lineRevisionCommentBeforeUpdateHooks = append(lineRevisionCommentBeforeUpdateHooks, lineRevisionCommentHook)
	case boil.BeforeDeleteHook:
		lineRevisionCommentBeforeDeleteHooks = append(lineRevisionCommentBeforeDeleteHooks, lineRevisionCommentHook)
	case boil.BeforeUpsertHook:
		lineRevisionCommentBeforeUpsertHooks = append(lineRevisionCommentBeforeUpsertHooks, lineRevisionCommentHook)
	case boil.AfterInsertHook:
		lineRevisionCommentAfterInsertHooks = append(lineRevisionCommentAfterInsertHooks, lineRevisionCommentHook)
	case boil.AfterSelectHook:
		lineRevisionCommentAfterSelectHooks = append(lineRevisionCommentAfterSelectHooks, lineRevisionCommentHook)
	case boil.AfterUpdateHook:
		lineRevisionCommentAfterUpdateHooks = append(lineRevisionCommentAfterUpdateHooks, lineRevisionCommentHook)
	case boil.AfterDeleteHook:
		lineRevisionCommentAfterDeleteHooks = append(lineRevisionCommentAfterDeleteHooks, lineRevisionCommentHook)
	case boil.AfterUpsertHook:
		lineRevisionCommentAfterUpsertHooks = append(lineRevisionCommentAfterUpsertHooks, lineRevisionCommentHook)
	}
}

// One returns a single lineRevisionComment record from the query.
func (q lineRevisionCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LineRevisionComment, error) {
	o := &LineRevisionComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repo: failed to execute a one query for line_revision_comment")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LineRevisionComment records from the query.
func (q lineRevisionCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (LineRevisionCommentSlice, error) {
	var o []*LineRevisionComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "repo: failed to assign all query results to LineRevisionComment slice")
	}

	if len(lineRevisionCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LineRevisionComment records in the query.
func (q lineRevisionCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to count line_revision_comment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lineRevisionCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "repo: failed to check if line_revision_comment exists")
	}

	return count > 0, nil
}

// LineRevision pointed to by the foreign key.
func (o *LineRevisionComment) LineRevision(mods ...qm.QueryMod) lineRevisionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.LineRevisionID),
	}

	queryMods = append(queryMods, mods...)

	query := LineRevisions(queryMods...)
	queries.SetFrom(query.Query, "`line_revision`")

	return query
}

// Commenter pointed to by the foreign key.
func (o *LineRevisionComment) Commenter(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CommenterID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// LoadLineRevision allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (lineRevisionCommentL) LoadLineRevision(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLineRevisionComment interface{}, mods queries.Applicator) error {
	var slice []*LineRevisionComment
	var object *LineRevisionComment

	if singular {
		object = maybeLineRevisionComment.(*LineRevisionComment)
	} else {
		slice = *maybeLineRevisionComment.(*[]*LineRevisionComment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lineRevisionCommentR{}
		}
		args = append(args, object.LineRevisionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lineRevisionCommentR{}
			}

			for _, a := range args {
				if a == obj.LineRevisionID {
					continue Outer
				}
			}

			args = append(args, obj.LineRevisionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`line_revision`),
		qm.WhereIn(`line_revision.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LineRevision")
	}

	var resultSlice []*LineRevision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LineRevision")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for line_revision")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for line_revision")
	}

	if len(lineRevisionCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LineRevision = foreign
		if foreign.R == nil {
			foreign.R = &lineRevisionR{}
		}
		foreign.R.LineRevisionComments = append(foreign.R.LineRevisionComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LineRevisionID == foreign.ID {
				local.R.LineRevision = foreign
				if foreign.R == nil {
					foreign.R = &lineRevisionR{}
				}
				foreign.R.LineRevisionComments = append(foreign.R.LineRevisionComments, local)
				break
			}
		}
	}

	return nil
}

// LoadCommenter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (lineRevisionCommentL) LoadCommenter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLineRevisionComment interface{}, mods queries.Applicator) error {
	var slice []*LineRevisionComment
	var object *LineRevisionComment

	if singular {
		object = maybeLineRevisionComment.(*LineRevisionComment)
	} else {
		slice = *maybeLineRevisionComment.(*[]*LineRevisionComment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lineRevisionCommentR{}
		}
		args = append(args, object.CommenterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lineRevisionCommentR{}
			}

			for _, a := range args {
				if a == obj.CommenterID {
					continue Outer
				}
			}

			args = append(args, obj.CommenterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(lineRevisionCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Commenter = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CommenterLineRevisionComments = append(foreign.R.CommenterLineRevisionComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommenterID == foreign.ID {
				local.R.Commenter = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CommenterLineRevisionComments = append(foreign.R.CommenterLineRevisionComments, local)
				break
			}
		}
	}

	return nil
}

// SetLineRevision of the lineRevisionComment to the related item.
// Sets o.R.LineRevision to related.
// Adds o to related.R.LineRevisionComments.
func (o *LineRevisionComment) SetLineRevision(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LineRevision) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `line_revision_comment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"line_revision_id"}),
		strmangle.WhereClause("`", "`", 0, lineRevisionCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LineRevisionID = related.ID
	if o.R == nil {
		o.R = &lineRevisionCommentR{
			LineRevision: related,
		}
	} else {
		o.R.LineRevision = related
	}

	if related.R == nil {
		related.R = &lineRevisionR{
			LineRevisionComments: LineRevisionCommentSlice{o},
		}
	} else {
		related.R.LineRevisionComments = append(related.R.LineRevisionComments, o)
	}

	return nil
}

// SetCommenter of the lineRevisionComment to the related item.
// Sets o.R.Commenter to related.
// Adds o to related.R.CommenterLineRevisionComments.
func (o *LineRevisionComment) SetCommenter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `line_revision_comment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"commenter_id"}),
		strmangle.WhereClause("`", "`", 0, lineRevisionCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommenterID = related.ID
	if o.R == nil {
		o.R = &lineRevisionCommentR{
			Commenter: related,
		}
	} else {
		o.R.Commenter = related
	}

	if related.R == nil {
		related.R = &userR{
			CommenterLineRevisionComments: LineRevisionCommentSlice{o},
		}
	} else {
		related.R.CommenterLineRevisionComments = append(related.R.CommenterLineRevisionComments, o)
	}

	return nil
}

// LineRevisionComments retrieves all the records using an executor.
func LineRevisionComments(mods ...qm.QueryMod) lineRevisionCommentQuery {
	mods = append(mods, qm.From("`line_revision_comment`"))
	return lineRevisionCommentQuery{NewQuery(mods...)}
}

// FindLineRevisionComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLineRevisionComment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*LineRevisionComment, error) {
	lineRevisionCommentObj := &LineRevisionComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `line_revision_comment` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lineRevisionCommentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "repo: unable to select from line_revision_comment")
	}

	return lineRevisionCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LineRevisionComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("repo: no line_revision_comment provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lineRevisionCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lineRevisionCommentInsertCacheMut.RLock()
	cache, cached := lineRevisionCommentInsertCache[key]
	lineRevisionCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lineRevisionCommentAllColumns,
			lineRevisionCommentColumnsWithDefault,
			lineRevisionCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lineRevisionCommentType, lineRevisionCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lineRevisionCommentType, lineRevisionCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `line_revision_comment` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `line_revision_comment` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `line_revision_comment` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, lineRevisionCommentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "repo: unable to insert into line_revision_comment")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == lineRevisionCommentMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "repo: unable to populate default values for line_revision_comment")
	}

CacheNoHooks:
	if !cached {
		lineRevisionCommentInsertCacheMut.Lock()
		lineRevisionCommentInsertCache[key] = cache
		lineRevisionCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LineRevisionComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LineRevisionComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lineRevisionCommentUpdateCacheMut.RLock()
	cache, cached := lineRevisionCommentUpdateCache[key]
	lineRevisionCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lineRevisionCommentAllColumns,
			lineRevisionCommentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("repo: unable to update line_revision_comment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `line_revision_comment` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, lineRevisionCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lineRevisionCommentType, lineRevisionCommentMapping, append(wl, lineRevisionCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update line_revision_comment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by update for line_revision_comment")
	}

	if !cached {
		lineRevisionCommentUpdateCacheMut.Lock()
		lineRevisionCommentUpdateCache[key] = cache
		lineRevisionCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q lineRevisionCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update all for line_revision_comment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to retrieve rows affected for line_revision_comment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LineRevisionCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("repo: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lineRevisionCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `line_revision_comment` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lineRevisionCommentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to update all in lineRevisionComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to retrieve rows affected all in update all lineRevisionComment")
	}
	return rowsAff, nil
}

var mySQLLineRevisionCommentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LineRevisionComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("repo: no line_revision_comment provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lineRevisionCommentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLLineRevisionCommentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lineRevisionCommentUpsertCacheMut.RLock()
	cache, cached := lineRevisionCommentUpsertCache[key]
	lineRevisionCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			lineRevisionCommentAllColumns,
			lineRevisionCommentColumnsWithDefault,
			lineRevisionCommentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			lineRevisionCommentAllColumns,
			lineRevisionCommentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("repo: unable to upsert line_revision_comment, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`line_revision_comment`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `line_revision_comment` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(lineRevisionCommentType, lineRevisionCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lineRevisionCommentType, lineRevisionCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "repo: unable to upsert for line_revision_comment")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == lineRevisionCommentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(lineRevisionCommentType, lineRevisionCommentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "repo: unable to retrieve unique values for line_revision_comment")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "repo: unable to populate default values for line_revision_comment")
	}

CacheNoHooks:
	if !cached {
		lineRevisionCommentUpsertCacheMut.Lock()
		lineRevisionCommentUpsertCache[key] = cache
		lineRevisionCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LineRevisionComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LineRevisionComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("repo: no LineRevisionComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lineRevisionCommentPrimaryKeyMapping)
	sql := "DELETE FROM `line_revision_comment` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete from line_revision_comment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by delete for line_revision_comment")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lineRevisionCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("repo: no lineRevisionCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete all from line_revision_comment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by deleteall for line_revision_comment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LineRevisionCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lineRevisionCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lineRevisionCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `line_revision_comment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lineRevisionCommentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "repo: unable to delete all from lineRevisionComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "repo: failed to get rows affected by deleteall for line_revision_comment")
	}

	if len(lineRevisionCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LineRevisionComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLineRevisionComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LineRevisionCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LineRevisionCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lineRevisionCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `line_revision_comment`.* FROM `line_revision_comment` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, lineRevisionCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "repo: unable to reload all in LineRevisionCommentSlice")
	}

	*o = slice

	return nil
}

// LineRevisionCommentExists checks if the LineRevisionComment row exists.
func LineRevisionCommentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `line_revision_comment` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "repo: unable to check if line_revision_comment exists")
	}

	return exists, nil
}
